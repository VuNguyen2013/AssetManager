<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cunghoc3_AssetManager.Services</name>
    </assembly>
    <members>
        <member name="T:cunghoc3_AssetManager.Services.AssetServiceBase">
            <summary>
             An object representation of the 'Asset' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Asset.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> class.
             </remarks>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:cunghoc3_AssetManager.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:cunghoc3_AssetManager.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.OnProcessStarting(cunghoc3_AssetManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.OnProcessEnded(cunghoc3_AssetManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.BulkInsert(cunghoc3_AssetManager.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[],cunghoc3_AssetManager.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.DeepLoad(cunghoc3_AssetManager.Entities.TList{`0},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.DeepSave(`0,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.DeepSave(`0,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceBaseCore`2.DeepSave(cunghoc3_AssetManager.Entities.TList{`0},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:cunghoc3_AssetManager.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:cunghoc3_AssetManager.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.CreateAsset(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.DateTime,System.String,System.String,System.String,System.Nullable{System.Int16},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Int16})">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_assetGroupId"></param>
            <param name="_unitId"></param>
            <param name="_amount"></param>
            <param name="_counPro"></param>
            <param name="_yearPro"></param>
            <param name="_departmentUsedId"></param>
            <param name="_totalPrice"></param>
            <param name="_budgetPrice"></param>
            <param name="_ownPrice"></param>
            <param name="_venturePrice"></param>
            <param name="_anotherPrice"></param>
            <param name="_totalDepreciation"></param>
            <param name="_budgetDepreciation"></param>
            <param name="_ownDepreciation"></param>
            <param name="_ventureDepreciation"></param>
            <param name="_anotherDepreciation"></param>
            <param name="_budgetRemain"></param>
            <param name="_ownRemain"></param>
            <param name="_ventureRemain"></param>
            <param name="_anotherRemain"></param>
            <param name="_totalReamain"></param>
            <param name="_upDownCode"></param>
            <param name="_inputDateTime"></param>
            <param name="_manufacturer"></param>
            <param name="_brand"></param>
            <param name="_model"></param>
            <param name="_status"></param>
            <param name="_dueDate"></param>
            <param name="_note"></param>
            <param name="_seriesNumber"></param>
            <param name="_condition"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetByAssetGroupId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__Asset__AssetGrou__15502E78 key.
            	FK__Asset__AssetGrou__15502E78 Description: 
            </summary>
            <param name="_assetGroupId"></param>
            <returns>Returns a generic collection of Asset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetByAssetGroupId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__Asset__AssetGrou__15502E78 key.
            	FK__Asset__AssetGrou__15502E78 Description: 
            </summary>
            <param name="_assetGroupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetByDepartmentUsedId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__Asset__Departmen__173876EA key.
            	FK__Asset__Departmen__173876EA Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <returns>Returns a generic collection of Asset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetByDepartmentUsedId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__Asset__Departmen__173876EA key.
            	FK__Asset__Departmen__173876EA Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetByUnitId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__Asset__UnitId__164452B1 key.
            	FK__Asset__UnitId__164452B1 Description: 
            </summary>
            <param name="_unitId"></param>
            <returns>Returns a generic collection of Asset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetByUnitId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__Asset__UnitId__164452B1 key.
            	FK__Asset__UnitId__164452B1 Description: 
            </summary>
            <param name="_unitId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Get(cunghoc3_AssetManager.Entities.AssetKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Asset__3214EC071367E606 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Asset__3214EC071367E606 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Asset} of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Asset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Insert(cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            public virtual method that Inserts a Asset object into the datasource using a transaction.
            </summary>
            <param name="entity">Asset object to Insert.</param>
            <remarks>After Inserting into the datasource, the Asset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Asset entity = new Asset();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AssetService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Asset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Asset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Asset.
             <code><![CDATA[
             TList<Asset> list = new TList<Asset>();
             Asset entity = new Asset();
             entity.StringProperty = "foo";
             Asset entity2 = new Asset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Update(cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            public virtual method that Updates a Asset object into the datasource using a transaction.
            </summary>
            <param name="entity">Asset object to Update.</param>
            <remarks>After Updateing into the datasource, the Asset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Asset entity = AssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AssetService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Asset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Asset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Asset.
             <code><![CDATA[
             TList<Asset> list = new TList<Asset>();
             Asset entity = new Asset();
             entity.StringProperty = "foo";
             Asset entity2 = new Asset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Save(cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            public virtual method that Saves a Asset object into the datasource using a transaction.
            </summary>
            <param name="entity">Asset object to Save.</param>
            <remarks>After Saveing into the datasource, the Asset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Asset entity = AssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AssetService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Asset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Asset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Asset.
             <code><![CDATA[
             TList<Asset> list = new TList<Asset>();
             Asset entity = new Asset();
             entity.StringProperty = "foo";
             Asset entity2 = new Asset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Delete(cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            public virtual method that Deletes a Asset object into the datasource using a transaction.
            </summary>
            <param name="entity">Asset object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Asset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Asset entity = AssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AssetService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Asset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Asset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Asset.
             <code><![CDATA[
             TList<Asset> list = new TList<Asset>();
             Asset entity = new Asset();
             entity.StringProperty = "foo";
             Asset entity2 = new Asset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Delete(cunghoc3_AssetManager.Entities.AssetKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Asset pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Asset Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Asset Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Asset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Asset,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Asset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Asset Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Asset,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Asset Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Asset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Asset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.Asset"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Asset Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Asset,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Asset object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Asset Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Asset</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Asset} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Asset Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.AssetServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.UnitServiceBase">
            <summary>
             An object representation of the 'Unit' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Unit.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.CreateUnit(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_note"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Get(cunghoc3_AssetManager.Entities.UnitKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Unit__3214EC070F975522 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Unit__3214EC070F975522 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Unit} of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Insert(cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            public virtual method that Inserts a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Insert.</param>
            <remarks>After Inserting into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Unit entity = new Unit();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UnitService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Update(cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            public virtual method that Updates a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Update.</param>
            <remarks>After Updateing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UnitService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Save(cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            public virtual method that Saves a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Save.</param>
            <remarks>After Saveing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UnitService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Delete(cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            public virtual method that Deletes a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UnitService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Delete(cunghoc3_AssetManager.Entities.UnitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Unit pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Unit Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Unit,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Unit Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Unit,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.Unit"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Unit Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Unit,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Unit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Unit Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Unit</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Unit} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.UnitServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.RepairAssetServiceBase">
            <summary>
             An object representation of the 'RepairAsset' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the RepairAsset.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.CreateRepairAsset(System.String,System.String,System.String,System.String,System.String,System.DateTime,System.Int64,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_assetId"></param>
            <param name="_departmentUsedId"></param>
            <param name="_reason"></param>
            <param name="_partnerId"></param>
            <param name="_repairDate"></param>
            <param name="_fee"></param>
            <param name="_address"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetByAssetId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__RepairAss__Asset__398D8EEE key.
            	FK__RepairAss__Asset__398D8EEE Description: 
            </summary>
            <param name="_assetId"></param>
            <returns>Returns a generic collection of RepairAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetByAssetId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__RepairAss__Asset__398D8EEE key.
            	FK__RepairAss__Asset__398D8EEE Description: 
            </summary>
            <param name="_assetId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetByDepartmentUsedId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__RepairAss__Depar__3A81B327 key.
            	FK__RepairAss__Depar__3A81B327 Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <returns>Returns a generic collection of RepairAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetByDepartmentUsedId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__RepairAss__Depar__3A81B327 key.
            	FK__RepairAss__Depar__3A81B327 Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetByPartnerId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__RepairAss__Partn__3B75D760 key.
            	FK__RepairAss__Partn__3B75D760 Description: 
            </summary>
            <param name="_partnerId"></param>
            <returns>Returns a generic collection of RepairAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetByPartnerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__RepairAss__Partn__3B75D760 key.
            	FK__RepairAss__Partn__3B75D760 Description: 
            </summary>
            <param name="_partnerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Get(cunghoc3_AssetManager.Entities.RepairAssetKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__RepairAs__3214EC0737A5467C index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__RepairAs__3214EC0737A5467C index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{RepairAsset} of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>RepairAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Insert(cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            public virtual method that Inserts a RepairAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">RepairAsset object to Insert.</param>
            <remarks>After Inserting into the datasource, the RepairAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            RepairAsset entity = new RepairAsset();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RepairAssetService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RepairAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>RepairAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of RepairAsset.
             <code><![CDATA[
             TList<RepairAsset> list = new TList<RepairAsset>();
             RepairAsset entity = new RepairAsset();
             entity.StringProperty = "foo";
             RepairAsset entity2 = new RepairAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepairAssetService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Update(cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            public virtual method that Updates a RepairAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">RepairAsset object to Update.</param>
            <remarks>After Updateing into the datasource, the RepairAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            RepairAsset entity = RepairAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RepairAssetService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RepairAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>RepairAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of RepairAsset.
             <code><![CDATA[
             TList<RepairAsset> list = new TList<RepairAsset>();
             RepairAsset entity = new RepairAsset();
             entity.StringProperty = "foo";
             RepairAsset entity2 = new RepairAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepairAssetService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Save(cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            public virtual method that Saves a RepairAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">RepairAsset object to Save.</param>
            <remarks>After Saveing into the datasource, the RepairAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            RepairAsset entity = RepairAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RepairAssetService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RepairAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>RepairAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of RepairAsset.
             <code><![CDATA[
             TList<RepairAsset> list = new TList<RepairAsset>();
             RepairAsset entity = new RepairAsset();
             entity.StringProperty = "foo";
             RepairAsset entity2 = new RepairAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepairAssetService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Delete(cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            public virtual method that Deletes a RepairAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">RepairAsset object to Delete.</param>
            <remarks>After Deleteing into the datasource, the RepairAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            RepairAsset entity = RepairAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RepairAssetService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RepairAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>RepairAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of RepairAsset.
             <code><![CDATA[
             TList<RepairAsset> list = new TList<RepairAsset>();
             RepairAsset entity = new RepairAsset();
             entity.StringProperty = "foo";
             RepairAsset entity2 = new RepairAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RepairAssetService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Delete(cunghoc3_AssetManager.Entities.RepairAssetKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">RepairAsset pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RepairAsset Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">RepairAsset Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.RepairAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.RepairAsset,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.RepairAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">RepairAsset Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.RepairAsset,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RepairAsset Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.RepairAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.RepairAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">RepairAsset Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.RepairAsset,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the RepairAsset object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">RepairAsset Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>RepairAsset</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{RepairAsset} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RepairAsset Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.RepairAssetServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AssetService">
            <summary>
            An component type implementation of the 'Asset' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetService.#ctor">
            <summary>
            Initializes a new instance of the AssetService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:cunghoc3_AssetManager.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:cunghoc3_AssetManager.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.Copy(cunghoc3_AssetManager.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:cunghoc3_AssetManager.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:cunghoc3_AssetManager.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <see cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DomainUtil.GetErrorsFromList``1(cunghoc3_AssetManager.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ImageService">
            <summary>
            An component type implementation of the 'Image' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ImageServiceBase">
            <summary>
             An object representation of the 'Image' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Image.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.Image"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.Image"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.CreateImage(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.Image"/> instance.
            </summary>
            <param name="_assetId"></param>
            <param name="_imageUrl"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Get(cunghoc3_AssetManager.Entities.ImageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Image__3214EC075070F446 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Image"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Image__3214EC075070F446 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Image"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.Image"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.Image"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Image} of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Image</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Insert(cunghoc3_AssetManager.Entities.Image)">
            <summary>
            public virtual method that Inserts a Image object into the datasource using a transaction.
            </summary>
            <param name="entity">Image object to Insert.</param>
            <remarks>After Inserting into the datasource, the Image object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Image entity = new Image();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ImageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Image</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Image</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Image.
             <code><![CDATA[
             TList<Image> list = new TList<Image>();
             Image entity = new Image();
             entity.StringProperty = "foo";
             Image entity2 = new Image();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ImageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Update(cunghoc3_AssetManager.Entities.Image)">
            <summary>
            public virtual method that Updates a Image object into the datasource using a transaction.
            </summary>
            <param name="entity">Image object to Update.</param>
            <remarks>After Updateing into the datasource, the Image object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Image entity = ImageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ImageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Image</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Image</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Image.
             <code><![CDATA[
             TList<Image> list = new TList<Image>();
             Image entity = new Image();
             entity.StringProperty = "foo";
             Image entity2 = new Image();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ImageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Save(cunghoc3_AssetManager.Entities.Image)">
            <summary>
            public virtual method that Saves a Image object into the datasource using a transaction.
            </summary>
            <param name="entity">Image object to Save.</param>
            <remarks>After Saveing into the datasource, the Image object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Image entity = ImageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ImageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Image</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Image</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Image.
             <code><![CDATA[
             TList<Image> list = new TList<Image>();
             Image entity = new Image();
             entity.StringProperty = "foo";
             Image entity2 = new Image();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ImageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Delete(cunghoc3_AssetManager.Entities.Image)">
            <summary>
            public virtual method that Deletes a Image object into the datasource using a transaction.
            </summary>
            <param name="entity">Image object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Image object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Image entity = ImageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ImageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Image</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Image</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Image.
             <code><![CDATA[
             TList<Image> list = new TList<Image>();
             Image entity = new Image();
             entity.StringProperty = "foo";
             Image entity2 = new Image();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ImageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Delete(cunghoc3_AssetManager.Entities.ImageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">Image pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoadById(System.Int64,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.Image"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Image Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Image"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Image)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Image Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Image)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Image,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Image)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Image Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Image,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.Image"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Image Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Image)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Image)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.Image"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Image)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.Image"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Image Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Image,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Image object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Image Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Image</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Image} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Image},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Image Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ImageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ImageService.#ctor">
            <summary>
            Initializes a new instance of the ImageService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AssetGroupTypeService">
            <summary>
            An component type implementation of the 'AssetGroupType' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase">
            <summary>
             An object representation of the 'AssetGroupType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AssetGroupType.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.CreateAssetGroupType(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Get(cunghoc3_AssetManager.Entities.AssetGroupTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__AssetGro__3214EC077F60ED59 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__AssetGro__3214EC077F60ED59 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AssetGroupType} of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AssetGroupType</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Insert(cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            public virtual method that Inserts a AssetGroupType object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroupType object to Insert.</param>
            <remarks>After Inserting into the datasource, the AssetGroupType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AssetGroupType entity = new AssetGroupType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AssetGroupTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroupType</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AssetGroupType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AssetGroupType.
             <code><![CDATA[
             TList<AssetGroupType> list = new TList<AssetGroupType>();
             AssetGroupType entity = new AssetGroupType();
             entity.StringProperty = "foo";
             AssetGroupType entity2 = new AssetGroupType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Update(cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            public virtual method that Updates a AssetGroupType object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroupType object to Update.</param>
            <remarks>After Updateing into the datasource, the AssetGroupType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AssetGroupType entity = AssetGroupTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AssetGroupTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroupType</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AssetGroupType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AssetGroupType.
             <code><![CDATA[
             TList<AssetGroupType> list = new TList<AssetGroupType>();
             AssetGroupType entity = new AssetGroupType();
             entity.StringProperty = "foo";
             AssetGroupType entity2 = new AssetGroupType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Save(cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            public virtual method that Saves a AssetGroupType object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroupType object to Save.</param>
            <remarks>After Saveing into the datasource, the AssetGroupType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AssetGroupType entity = AssetGroupTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AssetGroupTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroupType</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AssetGroupType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AssetGroupType.
             <code><![CDATA[
             TList<AssetGroupType> list = new TList<AssetGroupType>();
             AssetGroupType entity = new AssetGroupType();
             entity.StringProperty = "foo";
             AssetGroupType entity2 = new AssetGroupType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Delete(cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            public virtual method that Deletes a AssetGroupType object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroupType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AssetGroupType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AssetGroupType entity = AssetGroupTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AssetGroupTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroupType</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AssetGroupType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AssetGroupType.
             <code><![CDATA[
             TList<AssetGroupType> list = new TList<AssetGroupType>();
             AssetGroupType entity = new AssetGroupType();
             entity.StringProperty = "foo";
             AssetGroupType entity2 = new AssetGroupType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Delete(cunghoc3_AssetManager.Entities.AssetGroupTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">AssetGroupType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AssetGroupType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AssetGroupType Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroupType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroupType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroupType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AssetGroupType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroupType,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AssetGroupType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroupType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroupType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepSave(cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AssetGroupType Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepSave(cunghoc3_AssetManager.Entities.AssetGroupType,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AssetGroupType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AssetGroupType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AssetGroupType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AssetGroupType} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AssetGroupType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.AssetGroupTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupTypeService.#ctor">
            <summary>
            Initializes a new instance of the AssetGroupTypeService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.WarrantyAssetService">
            <summary>
            An component type implementation of the 'WarrantyAsset' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase">
            <summary>
             An object representation of the 'WarrantyAsset' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the WarrantyAsset.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.CreateWarrantyAsset(System.String,System.String,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_asssetId"></param>
            <param name="_departmentUsedId"></param>
            <param name="_partnerId"></param>
            <param name="_warDateTime"></param>
            <param name="_deadlineWar"></param>
            <param name="_address"></param>
            <param name="_personWar"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetByAsssetId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__WarrantyA__Assse__4222D4EF key.
            	FK__WarrantyA__Assse__4222D4EF Description: 
            </summary>
            <param name="_asssetId"></param>
            <returns>Returns a generic collection of WarrantyAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetByAsssetId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__WarrantyA__Assse__4222D4EF key.
            	FK__WarrantyA__Assse__4222D4EF Description: 
            </summary>
            <param name="_asssetId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetByDepartmentUsedId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__WarrantyA__Depar__4316F928 key.
            	FK__WarrantyA__Depar__4316F928 Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <returns>Returns a generic collection of WarrantyAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetByDepartmentUsedId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__WarrantyA__Depar__4316F928 key.
            	FK__WarrantyA__Depar__4316F928 Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetByPartnerId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__WarrantyA__Partn__440B1D61 key.
            	FK__WarrantyA__Partn__440B1D61 Description: 
            </summary>
            <param name="_partnerId"></param>
            <returns>Returns a generic collection of WarrantyAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetByPartnerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__WarrantyA__Partn__440B1D61 key.
            	FK__WarrantyA__Partn__440B1D61 Description: 
            </summary>
            <param name="_partnerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Get(cunghoc3_AssetManager.Entities.WarrantyAssetKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Warranty__3214EC07403A8C7D index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Warranty__3214EC07403A8C7D index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{WarrantyAsset} of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WarrantyAsset</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Insert(cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            public virtual method that Inserts a WarrantyAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">WarrantyAsset object to Insert.</param>
            <remarks>After Inserting into the datasource, the WarrantyAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            WarrantyAsset entity = new WarrantyAsset();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WarrantyAssetService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WarrantyAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>WarrantyAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of WarrantyAsset.
             <code><![CDATA[
             TList<WarrantyAsset> list = new TList<WarrantyAsset>();
             WarrantyAsset entity = new WarrantyAsset();
             entity.StringProperty = "foo";
             WarrantyAsset entity2 = new WarrantyAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WarrantyAssetService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Update(cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            public virtual method that Updates a WarrantyAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">WarrantyAsset object to Update.</param>
            <remarks>After Updateing into the datasource, the WarrantyAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            WarrantyAsset entity = WarrantyAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WarrantyAssetService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WarrantyAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>WarrantyAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of WarrantyAsset.
             <code><![CDATA[
             TList<WarrantyAsset> list = new TList<WarrantyAsset>();
             WarrantyAsset entity = new WarrantyAsset();
             entity.StringProperty = "foo";
             WarrantyAsset entity2 = new WarrantyAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WarrantyAssetService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Save(cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            public virtual method that Saves a WarrantyAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">WarrantyAsset object to Save.</param>
            <remarks>After Saveing into the datasource, the WarrantyAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            WarrantyAsset entity = WarrantyAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	WarrantyAssetService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WarrantyAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>WarrantyAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of WarrantyAsset.
             <code><![CDATA[
             TList<WarrantyAsset> list = new TList<WarrantyAsset>();
             WarrantyAsset entity = new WarrantyAsset();
             entity.StringProperty = "foo";
             WarrantyAsset entity2 = new WarrantyAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WarrantyAssetService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Delete(cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            public virtual method that Deletes a WarrantyAsset object into the datasource using a transaction.
            </summary>
            <param name="entity">WarrantyAsset object to Delete.</param>
            <remarks>After Deleteing into the datasource, the WarrantyAsset object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            WarrantyAsset entity = WarrantyAssetService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WarrantyAssetService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WarrantyAsset</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>WarrantyAsset</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of WarrantyAsset.
             <code><![CDATA[
             TList<WarrantyAsset> list = new TList<WarrantyAsset>();
             WarrantyAsset entity = new WarrantyAsset();
             entity.StringProperty = "foo";
             WarrantyAsset entity2 = new WarrantyAsset();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WarrantyAssetService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Delete(cunghoc3_AssetManager.Entities.WarrantyAssetKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">WarrantyAsset pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WarrantyAsset Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">WarrantyAsset Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.WarrantyAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.WarrantyAsset,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.WarrantyAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">WarrantyAsset Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.WarrantyAsset,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WarrantyAsset Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.WarrantyAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.WarrantyAsset)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">WarrantyAsset Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.WarrantyAsset,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the WarrantyAsset object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">WarrantyAsset Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>WarrantyAsset</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{WarrantyAsset} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">WarrantyAsset Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.WarrantyAssetServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.WarrantyAssetService.#ctor">
            <summary>
            Initializes a new instance of the WarrantyAssetService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cunghoc3_AssetManager.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ContextView`2.#ctor(`0,cunghoc3_AssetManager.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:cunghoc3_AssetManager.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ContextView`2.#ctor(`0,cunghoc3_AssetManager.Services.SecurityContext{`0},cunghoc3_AssetManager.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:cunghoc3_AssetManager.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.IProcessor.ChangeProcessorState(cunghoc3_AssetManager.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ProcessorBase.ChangeProcessorState(cunghoc3_AssetManager.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ProcessorBase.OnNotifyProcessorStateChanging(cunghoc3_AssetManager.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:cunghoc3_AssetManager.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.CapitalServiceBase">
            <summary>
             An object representation of the 'Capital' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Capital.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.CreateCapital(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_note"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Get(cunghoc3_AssetManager.Entities.CapitalKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Capital__3214EC0707F6335A index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Capital__3214EC0707F6335A index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Capital} of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Capital</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Insert(cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            public virtual method that Inserts a Capital object into the datasource using a transaction.
            </summary>
            <param name="entity">Capital object to Insert.</param>
            <remarks>After Inserting into the datasource, the Capital object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Capital entity = new Capital();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CapitalService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Capital</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Capital</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Capital.
             <code><![CDATA[
             TList<Capital> list = new TList<Capital>();
             Capital entity = new Capital();
             entity.StringProperty = "foo";
             Capital entity2 = new Capital();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CapitalService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Update(cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            public virtual method that Updates a Capital object into the datasource using a transaction.
            </summary>
            <param name="entity">Capital object to Update.</param>
            <remarks>After Updateing into the datasource, the Capital object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Capital entity = CapitalService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CapitalService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Capital</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Capital</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Capital.
             <code><![CDATA[
             TList<Capital> list = new TList<Capital>();
             Capital entity = new Capital();
             entity.StringProperty = "foo";
             Capital entity2 = new Capital();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CapitalService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Save(cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            public virtual method that Saves a Capital object into the datasource using a transaction.
            </summary>
            <param name="entity">Capital object to Save.</param>
            <remarks>After Saveing into the datasource, the Capital object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Capital entity = CapitalService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CapitalService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Capital</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Capital</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Capital.
             <code><![CDATA[
             TList<Capital> list = new TList<Capital>();
             Capital entity = new Capital();
             entity.StringProperty = "foo";
             Capital entity2 = new Capital();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CapitalService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Delete(cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            public virtual method that Deletes a Capital object into the datasource using a transaction.
            </summary>
            <param name="entity">Capital object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Capital object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Capital entity = CapitalService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CapitalService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Capital</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Capital</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Capital.
             <code><![CDATA[
             TList<Capital> list = new TList<Capital>();
             Capital entity = new Capital();
             entity.StringProperty = "foo";
             Capital entity2 = new Capital();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CapitalService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Delete(cunghoc3_AssetManager.Entities.CapitalKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Capital pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Capital Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Capital Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Capital)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Capital,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Capital)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Capital Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Capital,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Capital Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Capital)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Capital)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.Capital"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Capital Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Capital,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Capital object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Capital Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Capital</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Capital} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Capital Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.CapitalServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AuditService">
            <summary>
            An component type implementation of the 'Audit' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AuditServiceBase">
            <summary>
             An object representation of the 'Audit' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Audit.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.CreateAudit(System.String,System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> instance.
            </summary>
            <param name="_assetId"></param>
            <param name="_auditDate"></param>
            <param name="_comment"></param>
            <param name="_user"></param>
            <param name="_computer"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Get(cunghoc3_AssetManager.Entities.AuditKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Audit__3214EC075441852A index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Audit__3214EC075441852A index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Audit} of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Audit</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Insert(cunghoc3_AssetManager.Entities.Audit)">
            <summary>
            public virtual method that Inserts a Audit object into the datasource using a transaction.
            </summary>
            <param name="entity">Audit object to Insert.</param>
            <remarks>After Inserting into the datasource, the Audit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Audit entity = new Audit();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AuditService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Audit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Audit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Audit.
             <code><![CDATA[
             TList<Audit> list = new TList<Audit>();
             Audit entity = new Audit();
             entity.StringProperty = "foo";
             Audit entity2 = new Audit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AuditService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Update(cunghoc3_AssetManager.Entities.Audit)">
            <summary>
            public virtual method that Updates a Audit object into the datasource using a transaction.
            </summary>
            <param name="entity">Audit object to Update.</param>
            <remarks>After Updateing into the datasource, the Audit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Audit entity = AuditService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AuditService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Audit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Audit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Audit.
             <code><![CDATA[
             TList<Audit> list = new TList<Audit>();
             Audit entity = new Audit();
             entity.StringProperty = "foo";
             Audit entity2 = new Audit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AuditService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Save(cunghoc3_AssetManager.Entities.Audit)">
            <summary>
            public virtual method that Saves a Audit object into the datasource using a transaction.
            </summary>
            <param name="entity">Audit object to Save.</param>
            <remarks>After Saveing into the datasource, the Audit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Audit entity = AuditService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AuditService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Audit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Audit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Audit.
             <code><![CDATA[
             TList<Audit> list = new TList<Audit>();
             Audit entity = new Audit();
             entity.StringProperty = "foo";
             Audit entity2 = new Audit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AuditService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Delete(cunghoc3_AssetManager.Entities.Audit)">
            <summary>
            public virtual method that Deletes a Audit object into the datasource using a transaction.
            </summary>
            <param name="entity">Audit object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Audit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Audit entity = AuditService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AuditService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Audit</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Audit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Audit.
             <code><![CDATA[
             TList<Audit> list = new TList<Audit>();
             Audit entity = new Audit();
             entity.StringProperty = "foo";
             Audit entity2 = new Audit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AuditService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Delete(cunghoc3_AssetManager.Entities.AuditKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">Audit pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoadById(System.Int64,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Audit Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Audit)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Audit Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Audit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Audit,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Audit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Audit Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Audit,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Audit Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Audit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Audit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.Audit"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Audit)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.Audit"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Audit Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Audit,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Audit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Audit Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Audit</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Audit} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Audit},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Audit Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.AuditServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AuditService.#ctor">
            <summary>
            Initializes a new instance of the AuditService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.PartnerServiceBase">
            <summary>
             An object representation of the 'Partner' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Partner.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.CreatePartner(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_address"></param>
            <param name="_phone"></param>
            <param name="_taxCode"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Get(cunghoc3_AssetManager.Entities.PartnerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Partner__3214EC07286302EC index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Partner__3214EC07286302EC index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Partner} of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Partner</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Insert(cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            public virtual method that Inserts a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Insert.</param>
            <remarks>After Inserting into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Partner entity = new Partner();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PartnerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Update(cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            public virtual method that Updates a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Update.</param>
            <remarks>After Updateing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PartnerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Save(cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            public virtual method that Saves a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Save.</param>
            <remarks>After Saveing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PartnerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Delete(cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            public virtual method that Deletes a Partner object into the datasource using a transaction.
            </summary>
            <param name="entity">Partner object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Partner object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Partner entity = PartnerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PartnerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Partner</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Partner</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Partner.
             <code><![CDATA[
             TList<Partner> list = new TList<Partner>();
             Partner entity = new Partner();
             entity.StringProperty = "foo";
             Partner entity2 = new Partner();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PartnerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Delete(cunghoc3_AssetManager.Entities.PartnerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Partner pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Partner Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Partner,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Partner Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Partner,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.Partner)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.Partner"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Partner Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepSave(cunghoc3_AssetManager.Entities.Partner,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Partner object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Partner Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Partner</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Partner} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Partner Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.PartnerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ProcessorEventArgs.#ctor(cunghoc3_AssetManager.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="T:cunghoc3_AssetManager.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.IProcessorResult.AddBrokenRulesList(System.Type,cunghoc3_AssetManager.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,cunghoc3_AssetManager.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.OnProcessStarting(cunghoc3_AssetManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.OnProcessEnded(cunghoc3_AssetManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:cunghoc3_AssetManager.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.UnitService">
            <summary>
            An component type implementation of the 'Unit' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UnitService.#ctor">
            <summary>
            Initializes a new instance of the UnitService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.DepartmentUsedService">
            <summary>
            An component type implementation of the 'DepartmentUsed' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase">
            <summary>
             An object representation of the 'DepartmentUsed' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DepartmentUsed.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.CreateDepartmentUsed(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_phone"></param>
            <param name="_representative"></param>
            <param name="_address"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Get(cunghoc3_AssetManager.Entities.DepartmentUsedKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Departme__3214EC070BC6C43E index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__Departme__3214EC070BC6C43E index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DepartmentUsed} of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DepartmentUsed</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Insert(cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            public virtual method that Inserts a DepartmentUsed object into the datasource using a transaction.
            </summary>
            <param name="entity">DepartmentUsed object to Insert.</param>
            <remarks>After Inserting into the datasource, the DepartmentUsed object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DepartmentUsed entity = new DepartmentUsed();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DepartmentUsedService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DepartmentUsed</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DepartmentUsed</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DepartmentUsed.
             <code><![CDATA[
             TList<DepartmentUsed> list = new TList<DepartmentUsed>();
             DepartmentUsed entity = new DepartmentUsed();
             entity.StringProperty = "foo";
             DepartmentUsed entity2 = new DepartmentUsed();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentUsedService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Update(cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            public virtual method that Updates a DepartmentUsed object into the datasource using a transaction.
            </summary>
            <param name="entity">DepartmentUsed object to Update.</param>
            <remarks>After Updateing into the datasource, the DepartmentUsed object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DepartmentUsed entity = DepartmentUsedService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DepartmentUsedService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DepartmentUsed</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DepartmentUsed</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DepartmentUsed.
             <code><![CDATA[
             TList<DepartmentUsed> list = new TList<DepartmentUsed>();
             DepartmentUsed entity = new DepartmentUsed();
             entity.StringProperty = "foo";
             DepartmentUsed entity2 = new DepartmentUsed();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentUsedService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Save(cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            public virtual method that Saves a DepartmentUsed object into the datasource using a transaction.
            </summary>
            <param name="entity">DepartmentUsed object to Save.</param>
            <remarks>After Saveing into the datasource, the DepartmentUsed object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DepartmentUsed entity = DepartmentUsedService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DepartmentUsedService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DepartmentUsed</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DepartmentUsed</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DepartmentUsed.
             <code><![CDATA[
             TList<DepartmentUsed> list = new TList<DepartmentUsed>();
             DepartmentUsed entity = new DepartmentUsed();
             entity.StringProperty = "foo";
             DepartmentUsed entity2 = new DepartmentUsed();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentUsedService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Delete(cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            public virtual method that Deletes a DepartmentUsed object into the datasource using a transaction.
            </summary>
            <param name="entity">DepartmentUsed object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DepartmentUsed object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DepartmentUsed entity = DepartmentUsedService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DepartmentUsedService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DepartmentUsed</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DepartmentUsed</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DepartmentUsed.
             <code><![CDATA[
             TList<DepartmentUsed> list = new TList<DepartmentUsed>();
             DepartmentUsed entity = new DepartmentUsed();
             entity.StringProperty = "foo";
             DepartmentUsed entity2 = new DepartmentUsed();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DepartmentUsedService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Delete(cunghoc3_AssetManager.Entities.DepartmentUsedKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">DepartmentUsed pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DepartmentUsed Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DepartmentUsed Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.DepartmentUsed)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.DepartmentUsed,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.DepartmentUsed)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DepartmentUsed Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.DepartmentUsed,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DepartmentUsed Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.DepartmentUsed)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.DepartmentUsed)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepSave(cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DepartmentUsed Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepSave(cunghoc3_AssetManager.Entities.DepartmentUsed,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DepartmentUsed object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DepartmentUsed Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DepartmentUsed</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DepartmentUsed} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DepartmentUsed Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.DepartmentUsedServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.DepartmentUsedService.#ctor">
            <summary>
            Initializes a new instance of the DepartmentUsedService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.CapitalService">
            <summary>
            An component type implementation of the 'Capital' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CapitalService.#ctor">
            <summary>
            Initializes a new instance of the CapitalService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase">
            <summary>
             An object representation of the 'AssetLiquidation' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AssetLiquidation.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.CreateAssetLiquidation(System.String,System.String,System.Int32,System.String,System.DateTime,System.Int64)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_assetId"></param>
            <param name="_amount"></param>
            <param name="_departmentUsedId"></param>
            <param name="_liDateTime"></param>
            <param name="_liPrice"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetByAssetId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__AssetLiqu__Asset__31EC6D26 key.
            	FK__AssetLiqu__Asset__31EC6D26 Description: 
            </summary>
            <param name="_assetId"></param>
            <returns>Returns a generic collection of AssetLiquidation objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetByAssetId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__AssetLiqu__Asset__31EC6D26 key.
            	FK__AssetLiqu__Asset__31EC6D26 Description: 
            </summary>
            <param name="_assetId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetByDepartmentUsedId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__AssetLiqu__Depar__32E0915F key.
            	FK__AssetLiqu__Depar__32E0915F Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <returns>Returns a generic collection of AssetLiquidation objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetByDepartmentUsedId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__AssetLiqu__Depar__32E0915F key.
            	FK__AssetLiqu__Depar__32E0915F Description: 
            </summary>
            <param name="_departmentUsedId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Get(cunghoc3_AssetManager.Entities.AssetLiquidationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__AssetLiq__3214EC07300424B4 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__AssetLiq__3214EC07300424B4 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AssetLiquidation} of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AssetLiquidation</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Insert(cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            public virtual method that Inserts a AssetLiquidation object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetLiquidation object to Insert.</param>
            <remarks>After Inserting into the datasource, the AssetLiquidation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AssetLiquidation entity = new AssetLiquidation();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AssetLiquidationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetLiquidation</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AssetLiquidation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AssetLiquidation.
             <code><![CDATA[
             TList<AssetLiquidation> list = new TList<AssetLiquidation>();
             AssetLiquidation entity = new AssetLiquidation();
             entity.StringProperty = "foo";
             AssetLiquidation entity2 = new AssetLiquidation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetLiquidationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Update(cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            public virtual method that Updates a AssetLiquidation object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetLiquidation object to Update.</param>
            <remarks>After Updateing into the datasource, the AssetLiquidation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AssetLiquidation entity = AssetLiquidationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AssetLiquidationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetLiquidation</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AssetLiquidation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AssetLiquidation.
             <code><![CDATA[
             TList<AssetLiquidation> list = new TList<AssetLiquidation>();
             AssetLiquidation entity = new AssetLiquidation();
             entity.StringProperty = "foo";
             AssetLiquidation entity2 = new AssetLiquidation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetLiquidationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Save(cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            public virtual method that Saves a AssetLiquidation object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetLiquidation object to Save.</param>
            <remarks>After Saveing into the datasource, the AssetLiquidation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AssetLiquidation entity = AssetLiquidationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AssetLiquidationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetLiquidation</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AssetLiquidation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AssetLiquidation.
             <code><![CDATA[
             TList<AssetLiquidation> list = new TList<AssetLiquidation>();
             AssetLiquidation entity = new AssetLiquidation();
             entity.StringProperty = "foo";
             AssetLiquidation entity2 = new AssetLiquidation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetLiquidationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Delete(cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            public virtual method that Deletes a AssetLiquidation object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetLiquidation object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AssetLiquidation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AssetLiquidation entity = AssetLiquidationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AssetLiquidationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetLiquidation</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AssetLiquidation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AssetLiquidation.
             <code><![CDATA[
             TList<AssetLiquidation> list = new TList<AssetLiquidation>();
             AssetLiquidation entity = new AssetLiquidation();
             entity.StringProperty = "foo";
             AssetLiquidation entity2 = new AssetLiquidation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetLiquidationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Delete(cunghoc3_AssetManager.Entities.AssetLiquidationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">AssetLiquidation pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AssetLiquidation Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AssetLiquidation Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetLiquidation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetLiquidation,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetLiquidation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AssetLiquidation Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetLiquidation,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AssetLiquidation Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetLiquidation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetLiquidation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepSave(cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AssetLiquidation Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepSave(cunghoc3_AssetManager.Entities.AssetLiquidation,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AssetLiquidation object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AssetLiquidation Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AssetLiquidation</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AssetLiquidation} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AssetLiquidation Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.AssetLiquidationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AssetLiquidationService">
            <summary>
            An component type implementation of the 'AssetLiquidation' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetLiquidationService.#ctor">
            <summary>
            Initializes a new instance of the AssetLiquidationService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AssetGroupService">
            <summary>
            An component type implementation of the 'AssetGroup' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.AssetGroupServiceBase">
            <summary>
             An object representation of the 'AssetGroup' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AssetGroup.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.CreateAssetGroup(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_assetGroupTypeId"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetByAssetGroupTypeId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__AssetGrou__Asset__0519C6AF key.
            	FK__AssetGrou__Asset__0519C6AF Description: 
            </summary>
            <param name="_assetGroupTypeId"></param>
            <returns>Returns a generic collection of AssetGroup objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetByAssetGroupTypeId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the FK__AssetGrou__Asset__0519C6AF key.
            	FK__AssetGrou__Asset__0519C6AF Description: 
            </summary>
            <param name="_assetGroupTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Get(cunghoc3_AssetManager.Entities.AssetGroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__AssetGro__3214EC0703317E3D index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__AssetGro__3214EC0703317E3D index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AssetGroup} of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AssetGroup</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Insert(cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            public virtual method that Inserts a AssetGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroup object to Insert.</param>
            <remarks>After Inserting into the datasource, the AssetGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AssetGroup entity = new AssetGroup();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AssetGroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroup</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AssetGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AssetGroup.
             <code><![CDATA[
             TList<AssetGroup> list = new TList<AssetGroup>();
             AssetGroup entity = new AssetGroup();
             entity.StringProperty = "foo";
             AssetGroup entity2 = new AssetGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Update(cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            public virtual method that Updates a AssetGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroup object to Update.</param>
            <remarks>After Updateing into the datasource, the AssetGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AssetGroup entity = AssetGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AssetGroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroup</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AssetGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AssetGroup.
             <code><![CDATA[
             TList<AssetGroup> list = new TList<AssetGroup>();
             AssetGroup entity = new AssetGroup();
             entity.StringProperty = "foo";
             AssetGroup entity2 = new AssetGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Save(cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            public virtual method that Saves a AssetGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroup object to Save.</param>
            <remarks>After Saveing into the datasource, the AssetGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AssetGroup entity = AssetGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AssetGroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroup</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AssetGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AssetGroup.
             <code><![CDATA[
             TList<AssetGroup> list = new TList<AssetGroup>();
             AssetGroup entity = new AssetGroup();
             entity.StringProperty = "foo";
             AssetGroup entity2 = new AssetGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Delete(cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            public virtual method that Deletes a AssetGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">AssetGroup object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AssetGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AssetGroup entity = AssetGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AssetGroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AssetGroup</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AssetGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AssetGroup.
             <code><![CDATA[
             TList<AssetGroup> list = new TList<AssetGroup>();
             AssetGroup entity = new AssetGroup();
             entity.StringProperty = "foo";
             AssetGroup entity2 = new AssetGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AssetGroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Delete(cunghoc3_AssetManager.Entities.AssetGroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">AssetGroup pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AssetGroup Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AssetGroup Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroup,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AssetGroup Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroup,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AssetGroup Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.AssetGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepSave(cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AssetGroup Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepSave(cunghoc3_AssetManager.Entities.AssetGroup,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AssetGroup object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AssetGroup Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AssetGroup</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AssetGroup} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AssetGroup Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.AssetGroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.AssetGroupService.#ctor">
            <summary>
            Initializes a new instance of the AssetGroupService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:cunghoc3_AssetManager.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:cunghoc3_AssetManager.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.RepairAssetService">
            <summary>
            An component type implementation of the 'RepairAsset' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.RepairAssetService.#ctor">
            <summary>
            Initializes a new instance of the RepairAssetService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.UpDownReasonServiceBase">
            <summary>
             An object representation of the 'UpDownReason' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UpDownReason.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.CreateUpDownReason(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_type"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Get(cunghoc3_AssetManager.Entities.UpDownReasonKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__UpDownRe__3214EC074BAC3F29 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__UpDownRe__3214EC074BAC3F29 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UpDownReason} of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpDownReason</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Insert(cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            public virtual method that Inserts a UpDownReason object into the datasource using a transaction.
            </summary>
            <param name="entity">UpDownReason object to Insert.</param>
            <remarks>After Inserting into the datasource, the UpDownReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UpDownReason entity = new UpDownReason();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UpDownReasonService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpDownReason</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UpDownReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UpDownReason.
             <code><![CDATA[
             TList<UpDownReason> list = new TList<UpDownReason>();
             UpDownReason entity = new UpDownReason();
             entity.StringProperty = "foo";
             UpDownReason entity2 = new UpDownReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpDownReasonService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Update(cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            public virtual method that Updates a UpDownReason object into the datasource using a transaction.
            </summary>
            <param name="entity">UpDownReason object to Update.</param>
            <remarks>After Updateing into the datasource, the UpDownReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UpDownReason entity = UpDownReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UpDownReasonService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpDownReason</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UpDownReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UpDownReason.
             <code><![CDATA[
             TList<UpDownReason> list = new TList<UpDownReason>();
             UpDownReason entity = new UpDownReason();
             entity.StringProperty = "foo";
             UpDownReason entity2 = new UpDownReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpDownReasonService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Save(cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            public virtual method that Saves a UpDownReason object into the datasource using a transaction.
            </summary>
            <param name="entity">UpDownReason object to Save.</param>
            <remarks>After Saveing into the datasource, the UpDownReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UpDownReason entity = UpDownReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UpDownReasonService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpDownReason</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UpDownReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UpDownReason.
             <code><![CDATA[
             TList<UpDownReason> list = new TList<UpDownReason>();
             UpDownReason entity = new UpDownReason();
             entity.StringProperty = "foo";
             UpDownReason entity2 = new UpDownReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpDownReasonService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Delete(cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            public virtual method that Deletes a UpDownReason object into the datasource using a transaction.
            </summary>
            <param name="entity">UpDownReason object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UpDownReason object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UpDownReason entity = UpDownReasonService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UpDownReasonService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpDownReason</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UpDownReason</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UpDownReason.
             <code><![CDATA[
             TList<UpDownReason> list = new TList<UpDownReason>();
             UpDownReason entity = new UpDownReason();
             entity.StringProperty = "foo";
             UpDownReason entity2 = new UpDownReason();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpDownReasonService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Delete(cunghoc3_AssetManager.Entities.UpDownReasonKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">UpDownReason pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoadById(System.String,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpDownReason Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UpDownReason Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.UpDownReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.UpDownReason,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.UpDownReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UpDownReason Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.UpDownReason,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpDownReason Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.UpDownReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.UpDownReason)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepSave(cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UpDownReason Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepSave(cunghoc3_AssetManager.Entities.UpDownReason,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UpDownReason object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UpDownReason Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UpDownReason</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UpDownReason} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UpDownReason Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.UpDownReasonServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.PartnerService">
            <summary>
            An component type implementation of the 'Partner' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.PartnerService.#ctor">
            <summary>
            Initializes a new instance of the PartnerService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.CheckOutServiceBase">
            <summary>
             An object representation of the 'CheckOut' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CheckOut.cs file instead.
             All custom implementations should be done in the <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> class.
             </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> instance .
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.CreateCheckOut(System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int16})">
            <summary>
             A simple factory method to create a new <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> instance.
            </summary>
            <param name="_assetId"></param>
            <param name="_checkOutDate"></param>
            <param name="_comment"></param>
            <param name="_user"></param>
            <param name="_computer"></param>
            <param name="_status"></param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Get(cunghoc3_AssetManager.Entities.CheckOutKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__CheckOut__3214EC075812160E index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the datasource based on the primary key PK__CheckOut__3214EC075812160E index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> class.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CheckOut} of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,cunghoc3_AssetManager.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Find(cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CheckOut</c> objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Insert(cunghoc3_AssetManager.Entities.CheckOut)">
            <summary>
            public virtual method that Inserts a CheckOut object into the datasource using a transaction.
            </summary>
            <param name="entity">CheckOut object to Insert.</param>
            <remarks>After Inserting into the datasource, the CheckOut object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CheckOut entity = new CheckOut();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CheckOutService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Insert(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CheckOut</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CheckOut</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CheckOut.
             <code><![CDATA[
             TList<CheckOut> list = new TList<CheckOut>();
             CheckOut entity = new CheckOut();
             entity.StringProperty = "foo";
             CheckOut entity2 = new CheckOut();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CheckOutService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Update(cunghoc3_AssetManager.Entities.CheckOut)">
            <summary>
            public virtual method that Updates a CheckOut object into the datasource using a transaction.
            </summary>
            <param name="entity">CheckOut object to Update.</param>
            <remarks>After Updateing into the datasource, the CheckOut object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CheckOut entity = CheckOutService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CheckOutService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Update(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut})">
             <summary>
             public virtual method that Updates rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CheckOut</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CheckOut</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CheckOut.
             <code><![CDATA[
             TList<CheckOut> list = new TList<CheckOut>();
             CheckOut entity = new CheckOut();
             entity.StringProperty = "foo";
             CheckOut entity2 = new CheckOut();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CheckOutService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Save(cunghoc3_AssetManager.Entities.CheckOut)">
            <summary>
            public virtual method that Saves a CheckOut object into the datasource using a transaction.
            </summary>
            <param name="entity">CheckOut object to Save.</param>
            <remarks>After Saveing into the datasource, the CheckOut object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CheckOut entity = CheckOutService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CheckOutService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Save(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut})">
             <summary>
             public virtual method that Saves rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CheckOut</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CheckOut</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CheckOut.
             <code><![CDATA[
             TList<CheckOut> list = new TList<CheckOut>();
             CheckOut entity = new CheckOut();
             entity.StringProperty = "foo";
             CheckOut entity2 = new CheckOut();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CheckOutService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Delete(cunghoc3_AssetManager.Entities.CheckOut)">
            <summary>
            public virtual method that Deletes a CheckOut object into the datasource using a transaction.
            </summary>
            <param name="entity">CheckOut object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CheckOut object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CheckOut entity = CheckOutService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CheckOutService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Delete(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CheckOut</c> objects in a <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CheckOut</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CheckOut.
             <code><![CDATA[
             TList<CheckOut> list = new TList<CheckOut>();
             CheckOut entity = new CheckOut();
             entity.StringProperty = "foo";
             CheckOut entity2 = new CheckOut();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CheckOutService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Delete(cunghoc3_AssetManager.Entities.CheckOutKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">CheckOut pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoadById(System.Int64,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CheckOut Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.CheckOut)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CheckOut Object</param>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.CheckOut)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.CheckOut,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.CheckOut)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CheckOut Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.CheckOut,System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:cunghoc3_AssetManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CheckOut Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut})">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.CheckOut)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.CheckOut)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepLoad(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut},System.Boolean,cunghoc3_AssetManager.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:cunghoc3_AssetManager.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepSave(cunghoc3_AssetManager.Entities.CheckOut)">
            <summary>
            public virtualDeep Saves the <see cref="T:cunghoc3_AssetManager.Entities.CheckOut"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CheckOut Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepSave(cunghoc3_AssetManager.Entities.CheckOut,cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CheckOut object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CheckOut Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CheckOut</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut})">
            <summary>
            Deep Save the entire <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CheckOut} Object</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutServiceBase.DeepSave(cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.CheckOut},cunghoc3_AssetManager.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:cunghoc3_AssetManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CheckOut Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:cunghoc3_AssetManager.Services.CheckOutServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.UpDownReasonService">
            <summary>
            An component type implementation of the 'UpDownReason' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.UpDownReasonService.#ctor">
            <summary>
            Initializes a new instance of the UpDownReasonService class.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Services.CheckOutService">
            <summary>
            An component type implementation of the 'CheckOut' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:cunghoc3_AssetManager.Services.CheckOutService.#ctor">
            <summary>
            Initializes a new instance of the CheckOutService class.
            </summary>
        </member>
    </members>
</doc>
