
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Asset.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using cunghoc3_AssetManager.Entities.Validation;
#endregion

namespace cunghoc3_AssetManager.Entities
{
	///<summary>
	/// An object representation of the 'Asset' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AssetBase : EntityBase, IAsset, IEntityId<AssetKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AssetEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AssetEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AssetEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Asset> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AssetEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AssetEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AssetBase"/> instance.
		///</summary>
		public AssetBase()
		{
			this.entityData = new AssetEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AssetBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_name"></param>
		///<param name="_assetGroupId"></param>
		///<param name="_unitId"></param>
		///<param name="_amount"></param>
		///<param name="_counPro"></param>
		///<param name="_yearPro"></param>
		///<param name="_departmentUsedId"></param>
		///<param name="_totalPrice"></param>
		///<param name="_budgetPrice"></param>
		///<param name="_ownPrice"></param>
		///<param name="_venturePrice"></param>
		///<param name="_anotherPrice"></param>
		///<param name="_totalDepreciation"></param>
		///<param name="_budgetDepreciation"></param>
		///<param name="_ownDepreciation"></param>
		///<param name="_ventureDepreciation"></param>
		///<param name="_anotherDepreciation"></param>
		///<param name="_budgetRemain"></param>
		///<param name="_ownRemain"></param>
		///<param name="_ventureRemain"></param>
		///<param name="_anotherRemain"></param>
		///<param name="_totalReamain"></param>
		///<param name="_upDownCode"></param>
		///<param name="_inputDateTime"></param>
		public AssetBase(System.String _id, System.String _name, System.String _assetGroupId, 
			System.String _unitId, System.Int32 _amount, System.String _counPro, System.Int32 _yearPro, System.String _departmentUsedId, 
			System.Int64 _totalPrice, System.Int64 _budgetPrice, System.Int64 _ownPrice, System.Int64 _venturePrice, 
			System.Int64 _anotherPrice, System.Int64 _totalDepreciation, System.Int64 _budgetDepreciation, System.Int64 _ownDepreciation, 
			System.Int64 _ventureDepreciation, System.Int64 _anotherDepreciation, System.Int64 _budgetRemain, System.Int64 _ownRemain, 
			System.Int64 _ventureRemain, System.Int64 _anotherRemain, System.Int64 _totalReamain, System.String _upDownCode, 
			System.DateTime _inputDateTime)
		{
			this.entityData = new AssetEntityData();
			this.backupData = null;

			this.Id = _id;
			this.Name = _name;
			this.AssetGroupId = _assetGroupId;
			this.UnitId = _unitId;
			this.Amount = _amount;
			this.CounPro = _counPro;
			this.YearPro = _yearPro;
			this.DepartmentUsedId = _departmentUsedId;
			this.TotalPrice = _totalPrice;
			this.BudgetPrice = _budgetPrice;
			this.OwnPrice = _ownPrice;
			this.VenturePrice = _venturePrice;
			this.AnotherPrice = _anotherPrice;
			this.TotalDepreciation = _totalDepreciation;
			this.BudgetDepreciation = _budgetDepreciation;
			this.OwnDepreciation = _ownDepreciation;
			this.VentureDepreciation = _ventureDepreciation;
			this.AnotherDepreciation = _anotherDepreciation;
			this.BudgetRemain = _budgetRemain;
			this.OwnRemain = _ownRemain;
			this.VentureRemain = _ventureRemain;
			this.AnotherRemain = _anotherRemain;
			this.TotalReamain = _totalReamain;
			this.UpDownCode = _upDownCode;
			this.InputDateTime = _inputDateTime;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Asset"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_name"></param>
		///<param name="_assetGroupId"></param>
		///<param name="_unitId"></param>
		///<param name="_amount"></param>
		///<param name="_counPro"></param>
		///<param name="_yearPro"></param>
		///<param name="_departmentUsedId"></param>
		///<param name="_totalPrice"></param>
		///<param name="_budgetPrice"></param>
		///<param name="_ownPrice"></param>
		///<param name="_venturePrice"></param>
		///<param name="_anotherPrice"></param>
		///<param name="_totalDepreciation"></param>
		///<param name="_budgetDepreciation"></param>
		///<param name="_ownDepreciation"></param>
		///<param name="_ventureDepreciation"></param>
		///<param name="_anotherDepreciation"></param>
		///<param name="_budgetRemain"></param>
		///<param name="_ownRemain"></param>
		///<param name="_ventureRemain"></param>
		///<param name="_anotherRemain"></param>
		///<param name="_totalReamain"></param>
		///<param name="_upDownCode"></param>
		///<param name="_inputDateTime"></param>
		public static Asset CreateAsset(System.String _id, System.String _name, System.String _assetGroupId, 
			System.String _unitId, System.Int32 _amount, System.String _counPro, System.Int32 _yearPro, System.String _departmentUsedId, 
			System.Int64 _totalPrice, System.Int64 _budgetPrice, System.Int64 _ownPrice, System.Int64 _venturePrice, 
			System.Int64 _anotherPrice, System.Int64 _totalDepreciation, System.Int64 _budgetDepreciation, System.Int64 _ownDepreciation, 
			System.Int64 _ventureDepreciation, System.Int64 _anotherDepreciation, System.Int64 _budgetRemain, System.Int64 _ownRemain, 
			System.Int64 _ventureRemain, System.Int64 _anotherRemain, System.Int64 _totalReamain, System.String _upDownCode, 
			System.DateTime _inputDateTime)
		{
			Asset newAsset = new Asset();
			newAsset.Id = _id;
			newAsset.Name = _name;
			newAsset.AssetGroupId = _assetGroupId;
			newAsset.UnitId = _unitId;
			newAsset.Amount = _amount;
			newAsset.CounPro = _counPro;
			newAsset.YearPro = _yearPro;
			newAsset.DepartmentUsedId = _departmentUsedId;
			newAsset.TotalPrice = _totalPrice;
			newAsset.BudgetPrice = _budgetPrice;
			newAsset.OwnPrice = _ownPrice;
			newAsset.VenturePrice = _venturePrice;
			newAsset.AnotherPrice = _anotherPrice;
			newAsset.TotalDepreciation = _totalDepreciation;
			newAsset.BudgetDepreciation = _budgetDepreciation;
			newAsset.OwnDepreciation = _ownDepreciation;
			newAsset.VentureDepreciation = _ventureDepreciation;
			newAsset.AnotherDepreciation = _anotherDepreciation;
			newAsset.BudgetRemain = _budgetRemain;
			newAsset.OwnRemain = _ownRemain;
			newAsset.VentureRemain = _ventureRemain;
			newAsset.AnotherRemain = _anotherRemain;
			newAsset.TotalReamain = _totalReamain;
			newAsset.UpDownCode = _upDownCode;
			newAsset.InputDateTime = _inputDateTime;
			return newAsset;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 10)]
		public override System.String Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(AssetColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Id property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(AssetColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssetGroupId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String AssetGroupId
		{
			get
			{
				return this.entityData.AssetGroupId; 
			}
			
			set
			{
				if (this.entityData.AssetGroupId == value)
					return;
				
                OnPropertyChanging("AssetGroupId");                    
				OnColumnChanging(AssetColumn.AssetGroupId, this.entityData.AssetGroupId);
				this.entityData.AssetGroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.AssetGroupId, this.entityData.AssetGroupId);
				OnPropertyChanged("AssetGroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String UnitId
		{
			get
			{
				return this.entityData.UnitId; 
			}
			
			set
			{
				if (this.entityData.UnitId == value)
					return;
				
                OnPropertyChanging("UnitId");                    
				OnColumnChanging(AssetColumn.UnitId, this.entityData.UnitId);
				this.entityData.UnitId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.UnitId, this.entityData.UnitId);
				OnPropertyChanged("UnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Amount property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Amount
		{
			get
			{
				return this.entityData.Amount; 
			}
			
			set
			{
				if (this.entityData.Amount == value)
					return;
				
                OnPropertyChanging("Amount");                    
				OnColumnChanging(AssetColumn.Amount, this.entityData.Amount);
				this.entityData.Amount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.Amount, this.entityData.Amount);
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CounPro property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String CounPro
		{
			get
			{
				return this.entityData.CounPro; 
			}
			
			set
			{
				if (this.entityData.CounPro == value)
					return;
				
                OnPropertyChanging("CounPro");                    
				OnColumnChanging(AssetColumn.CounPro, this.entityData.CounPro);
				this.entityData.CounPro = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.CounPro, this.entityData.CounPro);
				OnPropertyChanged("CounPro");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YearPro property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 YearPro
		{
			get
			{
				return this.entityData.YearPro; 
			}
			
			set
			{
				if (this.entityData.YearPro == value)
					return;
				
                OnPropertyChanging("YearPro");                    
				OnColumnChanging(AssetColumn.YearPro, this.entityData.YearPro);
				this.entityData.YearPro = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.YearPro, this.entityData.YearPro);
				OnPropertyChanged("YearPro");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DepartmentUsedId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String DepartmentUsedId
		{
			get
			{
				return this.entityData.DepartmentUsedId; 
			}
			
			set
			{
				if (this.entityData.DepartmentUsedId == value)
					return;
				
                OnPropertyChanging("DepartmentUsedId");                    
				OnColumnChanging(AssetColumn.DepartmentUsedId, this.entityData.DepartmentUsedId);
				this.entityData.DepartmentUsedId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.DepartmentUsedId, this.entityData.DepartmentUsedId);
				OnPropertyChanged("DepartmentUsedId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 TotalPrice
		{
			get
			{
				return this.entityData.TotalPrice; 
			}
			
			set
			{
				if (this.entityData.TotalPrice == value)
					return;
				
                OnPropertyChanging("TotalPrice");                    
				OnColumnChanging(AssetColumn.TotalPrice, this.entityData.TotalPrice);
				this.entityData.TotalPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.TotalPrice, this.entityData.TotalPrice);
				OnPropertyChanged("TotalPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BudgetPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 BudgetPrice
		{
			get
			{
				return this.entityData.BudgetPrice; 
			}
			
			set
			{
				if (this.entityData.BudgetPrice == value)
					return;
				
                OnPropertyChanging("BudgetPrice");                    
				OnColumnChanging(AssetColumn.BudgetPrice, this.entityData.BudgetPrice);
				this.entityData.BudgetPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.BudgetPrice, this.entityData.BudgetPrice);
				OnPropertyChanged("BudgetPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OwnPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 OwnPrice
		{
			get
			{
				return this.entityData.OwnPrice; 
			}
			
			set
			{
				if (this.entityData.OwnPrice == value)
					return;
				
                OnPropertyChanging("OwnPrice");                    
				OnColumnChanging(AssetColumn.OwnPrice, this.entityData.OwnPrice);
				this.entityData.OwnPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.OwnPrice, this.entityData.OwnPrice);
				OnPropertyChanged("OwnPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VenturePrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 VenturePrice
		{
			get
			{
				return this.entityData.VenturePrice; 
			}
			
			set
			{
				if (this.entityData.VenturePrice == value)
					return;
				
                OnPropertyChanging("VenturePrice");                    
				OnColumnChanging(AssetColumn.VenturePrice, this.entityData.VenturePrice);
				this.entityData.VenturePrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.VenturePrice, this.entityData.VenturePrice);
				OnPropertyChanged("VenturePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnotherPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 AnotherPrice
		{
			get
			{
				return this.entityData.AnotherPrice; 
			}
			
			set
			{
				if (this.entityData.AnotherPrice == value)
					return;
				
                OnPropertyChanging("AnotherPrice");                    
				OnColumnChanging(AssetColumn.AnotherPrice, this.entityData.AnotherPrice);
				this.entityData.AnotherPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.AnotherPrice, this.entityData.AnotherPrice);
				OnPropertyChanged("AnotherPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalDepreciation property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 TotalDepreciation
		{
			get
			{
				return this.entityData.TotalDepreciation; 
			}
			
			set
			{
				if (this.entityData.TotalDepreciation == value)
					return;
				
                OnPropertyChanging("TotalDepreciation");                    
				OnColumnChanging(AssetColumn.TotalDepreciation, this.entityData.TotalDepreciation);
				this.entityData.TotalDepreciation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.TotalDepreciation, this.entityData.TotalDepreciation);
				OnPropertyChanged("TotalDepreciation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BudgetDepreciation property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 BudgetDepreciation
		{
			get
			{
				return this.entityData.BudgetDepreciation; 
			}
			
			set
			{
				if (this.entityData.BudgetDepreciation == value)
					return;
				
                OnPropertyChanging("BudgetDepreciation");                    
				OnColumnChanging(AssetColumn.BudgetDepreciation, this.entityData.BudgetDepreciation);
				this.entityData.BudgetDepreciation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.BudgetDepreciation, this.entityData.BudgetDepreciation);
				OnPropertyChanged("BudgetDepreciation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OwnDepreciation property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 OwnDepreciation
		{
			get
			{
				return this.entityData.OwnDepreciation; 
			}
			
			set
			{
				if (this.entityData.OwnDepreciation == value)
					return;
				
                OnPropertyChanging("OwnDepreciation");                    
				OnColumnChanging(AssetColumn.OwnDepreciation, this.entityData.OwnDepreciation);
				this.entityData.OwnDepreciation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.OwnDepreciation, this.entityData.OwnDepreciation);
				OnPropertyChanged("OwnDepreciation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VentureDepreciation property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 VentureDepreciation
		{
			get
			{
				return this.entityData.VentureDepreciation; 
			}
			
			set
			{
				if (this.entityData.VentureDepreciation == value)
					return;
				
                OnPropertyChanging("VentureDepreciation");                    
				OnColumnChanging(AssetColumn.VentureDepreciation, this.entityData.VentureDepreciation);
				this.entityData.VentureDepreciation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.VentureDepreciation, this.entityData.VentureDepreciation);
				OnPropertyChanged("VentureDepreciation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnotherDepreciation property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 AnotherDepreciation
		{
			get
			{
				return this.entityData.AnotherDepreciation; 
			}
			
			set
			{
				if (this.entityData.AnotherDepreciation == value)
					return;
				
                OnPropertyChanging("AnotherDepreciation");                    
				OnColumnChanging(AssetColumn.AnotherDepreciation, this.entityData.AnotherDepreciation);
				this.entityData.AnotherDepreciation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.AnotherDepreciation, this.entityData.AnotherDepreciation);
				OnPropertyChanged("AnotherDepreciation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BudgetRemain property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 BudgetRemain
		{
			get
			{
				return this.entityData.BudgetRemain; 
			}
			
			set
			{
				if (this.entityData.BudgetRemain == value)
					return;
				
                OnPropertyChanging("BudgetRemain");                    
				OnColumnChanging(AssetColumn.BudgetRemain, this.entityData.BudgetRemain);
				this.entityData.BudgetRemain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.BudgetRemain, this.entityData.BudgetRemain);
				OnPropertyChanged("BudgetRemain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OwnRemain property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 OwnRemain
		{
			get
			{
				return this.entityData.OwnRemain; 
			}
			
			set
			{
				if (this.entityData.OwnRemain == value)
					return;
				
                OnPropertyChanging("OwnRemain");                    
				OnColumnChanging(AssetColumn.OwnRemain, this.entityData.OwnRemain);
				this.entityData.OwnRemain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.OwnRemain, this.entityData.OwnRemain);
				OnPropertyChanged("OwnRemain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VentureRemain property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 VentureRemain
		{
			get
			{
				return this.entityData.VentureRemain; 
			}
			
			set
			{
				if (this.entityData.VentureRemain == value)
					return;
				
                OnPropertyChanging("VentureRemain");                    
				OnColumnChanging(AssetColumn.VentureRemain, this.entityData.VentureRemain);
				this.entityData.VentureRemain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.VentureRemain, this.entityData.VentureRemain);
				OnPropertyChanged("VentureRemain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnotherRemain property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 AnotherRemain
		{
			get
			{
				return this.entityData.AnotherRemain; 
			}
			
			set
			{
				if (this.entityData.AnotherRemain == value)
					return;
				
                OnPropertyChanging("AnotherRemain");                    
				OnColumnChanging(AssetColumn.AnotherRemain, this.entityData.AnotherRemain);
				this.entityData.AnotherRemain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.AnotherRemain, this.entityData.AnotherRemain);
				OnPropertyChanged("AnotherRemain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalReamain property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 TotalReamain
		{
			get
			{
				return this.entityData.TotalReamain; 
			}
			
			set
			{
				if (this.entityData.TotalReamain == value)
					return;
				
                OnPropertyChanging("TotalReamain");                    
				OnColumnChanging(AssetColumn.TotalReamain, this.entityData.TotalReamain);
				this.entityData.TotalReamain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.TotalReamain, this.entityData.TotalReamain);
				OnPropertyChanged("TotalReamain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpDownCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String UpDownCode
		{
			get
			{
				return this.entityData.UpDownCode; 
			}
			
			set
			{
				if (this.entityData.UpDownCode == value)
					return;
				
                OnPropertyChanging("UpDownCode");                    
				OnColumnChanging(AssetColumn.UpDownCode, this.entityData.UpDownCode);
				this.entityData.UpDownCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.UpDownCode, this.entityData.UpDownCode);
				OnPropertyChanged("UpDownCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InputDateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime InputDateTime
		{
			get
			{
				return this.entityData.InputDateTime; 
			}
			
			set
			{
				if (this.entityData.InputDateTime == value)
					return;
				
                OnPropertyChanging("InputDateTime");                    
				OnColumnChanging(AssetColumn.InputDateTime, this.entityData.InputDateTime);
				this.entityData.InputDateTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AssetColumn.InputDateTime, this.entityData.InputDateTime);
				OnPropertyChanged("InputDateTime");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AssetGroup"/>.
		/// </summary>
		/// <value>The source AssetGroup for AssetGroupId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AssetGroup AssetGroupIdSource
      	{
            get { return entityData.AssetGroupIdSource; }
            set { entityData.AssetGroupIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="DepartmentUsed"/>.
		/// </summary>
		/// <value>The source DepartmentUsed for DepartmentUsedId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DepartmentUsed DepartmentUsedIdSource
      	{
            get { return entityData.DepartmentUsedIdSource; }
            set { entityData.DepartmentUsedIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Unit"/>.
		/// </summary>
		/// <value>The source Unit for UnitId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Unit UnitIdSource
      	{
            get { return entityData.UnitIdSource; }
            set { entityData.UnitIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of WarrantyAsset objects
		///	which are related to this object through the relation FK__WarrantyA__Assse__4222D4EF
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<WarrantyAsset> WarrantyAssetCollection
		{
			get { return entityData.WarrantyAssetCollection; }
			set { entityData.WarrantyAssetCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AssetLiquidation objects
		///	which are related to this object through the relation FK__AssetLiqu__Asset__31EC6D26
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AssetLiquidation> AssetLiquidationCollection
		{
			get { return entityData.AssetLiquidationCollection; }
			set { entityData.AssetLiquidationCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RepairAsset objects
		///	which are related to this object through the relation FK__RepairAss__Asset__398D8EEE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RepairAsset> RepairAssetCollection
		{
			get { return entityData.RepairAssetCollection; }
			set { entityData.RepairAssetCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Id", "Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Id", "Id", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AssetGroupId", "Asset Group Id", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UnitId", "Unit Id", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CounPro", "Coun Pro"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CounPro", "Coun Pro", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DepartmentUsedId", "Department Used Id", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpDownCode", "Up Down Code", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Asset"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "Name", "AssetGroupId", "UnitId", "Amount", "CounPro", "YearPro", "DepartmentUsedId", "TotalPrice", "BudgetPrice", "OwnPrice", "VenturePrice", "AnotherPrice", "TotalDepreciation", "BudgetDepreciation", "OwnDepreciation", "VentureDepreciation", "AnotherDepreciation", "BudgetRemain", "OwnRemain", "VentureRemain", "AnotherRemain", "TotalReamain", "UpDownCode", "InputDateTime"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AssetEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Asset) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Asset>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Asset);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Asset Entity 
		///</summary>
		protected virtual Asset Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Asset copy = new Asset();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
					copy.OriginalId = this.OriginalId;
				copy.Name = this.Name;
				copy.AssetGroupId = this.AssetGroupId;
				copy.UnitId = this.UnitId;
				copy.Amount = this.Amount;
				copy.CounPro = this.CounPro;
				copy.YearPro = this.YearPro;
				copy.DepartmentUsedId = this.DepartmentUsedId;
				copy.TotalPrice = this.TotalPrice;
				copy.BudgetPrice = this.BudgetPrice;
				copy.OwnPrice = this.OwnPrice;
				copy.VenturePrice = this.VenturePrice;
				copy.AnotherPrice = this.AnotherPrice;
				copy.TotalDepreciation = this.TotalDepreciation;
				copy.BudgetDepreciation = this.BudgetDepreciation;
				copy.OwnDepreciation = this.OwnDepreciation;
				copy.VentureDepreciation = this.VentureDepreciation;
				copy.AnotherDepreciation = this.AnotherDepreciation;
				copy.BudgetRemain = this.BudgetRemain;
				copy.OwnRemain = this.OwnRemain;
				copy.VentureRemain = this.VentureRemain;
				copy.AnotherRemain = this.AnotherRemain;
				copy.TotalReamain = this.TotalReamain;
				copy.UpDownCode = this.UpDownCode;
				copy.InputDateTime = this.InputDateTime;
			
			if (this.AssetGroupIdSource != null && existingCopies.Contains(this.AssetGroupIdSource))
				copy.AssetGroupIdSource = existingCopies[this.AssetGroupIdSource] as AssetGroup;
			else
				copy.AssetGroupIdSource = MakeCopyOf(this.AssetGroupIdSource, existingCopies) as AssetGroup;
			if (this.DepartmentUsedIdSource != null && existingCopies.Contains(this.DepartmentUsedIdSource))
				copy.DepartmentUsedIdSource = existingCopies[this.DepartmentUsedIdSource] as DepartmentUsed;
			else
				copy.DepartmentUsedIdSource = MakeCopyOf(this.DepartmentUsedIdSource, existingCopies) as DepartmentUsed;
			if (this.UnitIdSource != null && existingCopies.Contains(this.UnitIdSource))
				copy.UnitIdSource = existingCopies[this.UnitIdSource] as Unit;
			else
				copy.UnitIdSource = MakeCopyOf(this.UnitIdSource, existingCopies) as Unit;
		
			//deep copy nested objects
			copy.WarrantyAssetCollection = (TList<WarrantyAsset>) MakeCopyOf(this.WarrantyAssetCollection, existingCopies); 
			copy.AssetLiquidationCollection = (TList<AssetLiquidation>) MakeCopyOf(this.AssetLiquidationCollection, existingCopies); 
			copy.RepairAssetCollection = (TList<RepairAsset>) MakeCopyOf(this.RepairAssetCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Asset Entity 
		///</summary>
		public virtual Asset Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Asset Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Asset DeepCopy()
		{
			return EntityHelper.Clone<Asset>(this as Asset);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AssetEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AssetEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AssetEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AssetColumn column)
		{
			switch(column)
			{
					case AssetColumn.Id:
					return entityData.Id != _originalData.Id;
					case AssetColumn.Name:
					return entityData.Name != _originalData.Name;
					case AssetColumn.AssetGroupId:
					return entityData.AssetGroupId != _originalData.AssetGroupId;
					case AssetColumn.UnitId:
					return entityData.UnitId != _originalData.UnitId;
					case AssetColumn.Amount:
					return entityData.Amount != _originalData.Amount;
					case AssetColumn.CounPro:
					return entityData.CounPro != _originalData.CounPro;
					case AssetColumn.YearPro:
					return entityData.YearPro != _originalData.YearPro;
					case AssetColumn.DepartmentUsedId:
					return entityData.DepartmentUsedId != _originalData.DepartmentUsedId;
					case AssetColumn.TotalPrice:
					return entityData.TotalPrice != _originalData.TotalPrice;
					case AssetColumn.BudgetPrice:
					return entityData.BudgetPrice != _originalData.BudgetPrice;
					case AssetColumn.OwnPrice:
					return entityData.OwnPrice != _originalData.OwnPrice;
					case AssetColumn.VenturePrice:
					return entityData.VenturePrice != _originalData.VenturePrice;
					case AssetColumn.AnotherPrice:
					return entityData.AnotherPrice != _originalData.AnotherPrice;
					case AssetColumn.TotalDepreciation:
					return entityData.TotalDepreciation != _originalData.TotalDepreciation;
					case AssetColumn.BudgetDepreciation:
					return entityData.BudgetDepreciation != _originalData.BudgetDepreciation;
					case AssetColumn.OwnDepreciation:
					return entityData.OwnDepreciation != _originalData.OwnDepreciation;
					case AssetColumn.VentureDepreciation:
					return entityData.VentureDepreciation != _originalData.VentureDepreciation;
					case AssetColumn.AnotherDepreciation:
					return entityData.AnotherDepreciation != _originalData.AnotherDepreciation;
					case AssetColumn.BudgetRemain:
					return entityData.BudgetRemain != _originalData.BudgetRemain;
					case AssetColumn.OwnRemain:
					return entityData.OwnRemain != _originalData.OwnRemain;
					case AssetColumn.VentureRemain:
					return entityData.VentureRemain != _originalData.VentureRemain;
					case AssetColumn.AnotherRemain:
					return entityData.AnotherRemain != _originalData.AnotherRemain;
					case AssetColumn.TotalReamain:
					return entityData.TotalReamain != _originalData.TotalReamain;
					case AssetColumn.UpDownCode:
					return entityData.UpDownCode != _originalData.UpDownCode;
					case AssetColumn.InputDateTime:
					return entityData.InputDateTime != _originalData.InputDateTime;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AssetColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.AssetGroupId != _originalData.AssetGroupId;
			result = result || entityData.UnitId != _originalData.UnitId;
			result = result || entityData.Amount != _originalData.Amount;
			result = result || entityData.CounPro != _originalData.CounPro;
			result = result || entityData.YearPro != _originalData.YearPro;
			result = result || entityData.DepartmentUsedId != _originalData.DepartmentUsedId;
			result = result || entityData.TotalPrice != _originalData.TotalPrice;
			result = result || entityData.BudgetPrice != _originalData.BudgetPrice;
			result = result || entityData.OwnPrice != _originalData.OwnPrice;
			result = result || entityData.VenturePrice != _originalData.VenturePrice;
			result = result || entityData.AnotherPrice != _originalData.AnotherPrice;
			result = result || entityData.TotalDepreciation != _originalData.TotalDepreciation;
			result = result || entityData.BudgetDepreciation != _originalData.BudgetDepreciation;
			result = result || entityData.OwnDepreciation != _originalData.OwnDepreciation;
			result = result || entityData.VentureDepreciation != _originalData.VentureDepreciation;
			result = result || entityData.AnotherDepreciation != _originalData.AnotherDepreciation;
			result = result || entityData.BudgetRemain != _originalData.BudgetRemain;
			result = result || entityData.OwnRemain != _originalData.OwnRemain;
			result = result || entityData.VentureRemain != _originalData.VentureRemain;
			result = result || entityData.AnotherRemain != _originalData.AnotherRemain;
			result = result || entityData.TotalReamain != _originalData.TotalReamain;
			result = result || entityData.UpDownCode != _originalData.UpDownCode;
			result = result || entityData.InputDateTime != _originalData.InputDateTime;
			return result;
		}	
		
		///<summary>
		///  Returns a Asset Entity with the original data.
		///</summary>
		public Asset GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAsset(
				_originalData.Id,
				_originalData.Name,
				_originalData.AssetGroupId,
				_originalData.UnitId,
				_originalData.Amount,
				_originalData.CounPro,
				_originalData.YearPro,
				_originalData.DepartmentUsedId,
				_originalData.TotalPrice,
				_originalData.BudgetPrice,
				_originalData.OwnPrice,
				_originalData.VenturePrice,
				_originalData.AnotherPrice,
				_originalData.TotalDepreciation,
				_originalData.BudgetDepreciation,
				_originalData.OwnDepreciation,
				_originalData.VentureDepreciation,
				_originalData.AnotherDepreciation,
				_originalData.BudgetRemain,
				_originalData.OwnRemain,
				_originalData.VentureRemain,
				_originalData.AnotherRemain,
				_originalData.TotalReamain,
				_originalData.UpDownCode,
				_originalData.InputDateTime
				);
				
			return (Asset)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AssetBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AssetBase)
				return ValueEquals(this, (AssetBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AssetBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					((this.AssetGroupId == null) ? string.Empty : this.AssetGroupId.ToString()).GetHashCode() ^ 
					((this.UnitId == null) ? string.Empty : this.UnitId.ToString()).GetHashCode() ^ 
					this.Amount.GetHashCode() ^ 
					this.CounPro.GetHashCode() ^ 
					this.YearPro.GetHashCode() ^ 
					((this.DepartmentUsedId == null) ? string.Empty : this.DepartmentUsedId.ToString()).GetHashCode() ^ 
					this.TotalPrice.GetHashCode() ^ 
					this.BudgetPrice.GetHashCode() ^ 
					this.OwnPrice.GetHashCode() ^ 
					this.VenturePrice.GetHashCode() ^ 
					this.AnotherPrice.GetHashCode() ^ 
					this.TotalDepreciation.GetHashCode() ^ 
					this.BudgetDepreciation.GetHashCode() ^ 
					this.OwnDepreciation.GetHashCode() ^ 
					this.VentureDepreciation.GetHashCode() ^ 
					this.AnotherDepreciation.GetHashCode() ^ 
					this.BudgetRemain.GetHashCode() ^ 
					this.OwnRemain.GetHashCode() ^ 
					this.VentureRemain.GetHashCode() ^ 
					this.AnotherRemain.GetHashCode() ^ 
					this.TotalReamain.GetHashCode() ^ 
					((this.UpDownCode == null) ? string.Empty : this.UpDownCode.ToString()).GetHashCode() ^ 
					this.InputDateTime.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AssetBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AssetBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AssetBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AssetBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AssetBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AssetBase Object1, AssetBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if ( Object1.AssetGroupId != null && Object2.AssetGroupId != null )
			{
				if (Object1.AssetGroupId != Object2.AssetGroupId)
					equal = false;
			}
			else if (Object1.AssetGroupId == null ^ Object2.AssetGroupId == null )
			{
				equal = false;
			}
			if ( Object1.UnitId != null && Object2.UnitId != null )
			{
				if (Object1.UnitId != Object2.UnitId)
					equal = false;
			}
			else if (Object1.UnitId == null ^ Object2.UnitId == null )
			{
				equal = false;
			}
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if (Object1.CounPro != Object2.CounPro)
				equal = false;
			if (Object1.YearPro != Object2.YearPro)
				equal = false;
			if ( Object1.DepartmentUsedId != null && Object2.DepartmentUsedId != null )
			{
				if (Object1.DepartmentUsedId != Object2.DepartmentUsedId)
					equal = false;
			}
			else if (Object1.DepartmentUsedId == null ^ Object2.DepartmentUsedId == null )
			{
				equal = false;
			}
			if (Object1.TotalPrice != Object2.TotalPrice)
				equal = false;
			if (Object1.BudgetPrice != Object2.BudgetPrice)
				equal = false;
			if (Object1.OwnPrice != Object2.OwnPrice)
				equal = false;
			if (Object1.VenturePrice != Object2.VenturePrice)
				equal = false;
			if (Object1.AnotherPrice != Object2.AnotherPrice)
				equal = false;
			if (Object1.TotalDepreciation != Object2.TotalDepreciation)
				equal = false;
			if (Object1.BudgetDepreciation != Object2.BudgetDepreciation)
				equal = false;
			if (Object1.OwnDepreciation != Object2.OwnDepreciation)
				equal = false;
			if (Object1.VentureDepreciation != Object2.VentureDepreciation)
				equal = false;
			if (Object1.AnotherDepreciation != Object2.AnotherDepreciation)
				equal = false;
			if (Object1.BudgetRemain != Object2.BudgetRemain)
				equal = false;
			if (Object1.OwnRemain != Object2.OwnRemain)
				equal = false;
			if (Object1.VentureRemain != Object2.VentureRemain)
				equal = false;
			if (Object1.AnotherRemain != Object2.AnotherRemain)
				equal = false;
			if (Object1.TotalReamain != Object2.TotalReamain)
				equal = false;
			if ( Object1.UpDownCode != null && Object2.UpDownCode != null )
			{
				if (Object1.UpDownCode != Object2.UpDownCode)
					equal = false;
			}
			else if (Object1.UpDownCode == null ^ Object2.UpDownCode == null )
			{
				equal = false;
			}
			if (Object1.InputDateTime != Object2.InputDateTime)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AssetBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AssetComparer GetComparer()
        {
            return new AssetComparer();
        }
        */

        // Comparer delegates back to Asset
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Asset rhs, AssetColumn which)
        {
            switch (which)
            {
            	
            	
            	case AssetColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case AssetColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case AssetColumn.AssetGroupId:
            		return this.AssetGroupId.CompareTo(rhs.AssetGroupId);
            		
            		                 
            	
            	
            	case AssetColumn.UnitId:
            		return this.UnitId.CompareTo(rhs.UnitId);
            		
            		                 
            	
            	
            	case AssetColumn.Amount:
            		return this.Amount.CompareTo(rhs.Amount);
            		
            		                 
            	
            	
            	case AssetColumn.CounPro:
            		return this.CounPro.CompareTo(rhs.CounPro);
            		
            		                 
            	
            	
            	case AssetColumn.YearPro:
            		return this.YearPro.CompareTo(rhs.YearPro);
            		
            		                 
            	
            	
            	case AssetColumn.DepartmentUsedId:
            		return this.DepartmentUsedId.CompareTo(rhs.DepartmentUsedId);
            		
            		                 
            	
            	
            	case AssetColumn.TotalPrice:
            		return this.TotalPrice.CompareTo(rhs.TotalPrice);
            		
            		                 
            	
            	
            	case AssetColumn.BudgetPrice:
            		return this.BudgetPrice.CompareTo(rhs.BudgetPrice);
            		
            		                 
            	
            	
            	case AssetColumn.OwnPrice:
            		return this.OwnPrice.CompareTo(rhs.OwnPrice);
            		
            		                 
            	
            	
            	case AssetColumn.VenturePrice:
            		return this.VenturePrice.CompareTo(rhs.VenturePrice);
            		
            		                 
            	
            	
            	case AssetColumn.AnotherPrice:
            		return this.AnotherPrice.CompareTo(rhs.AnotherPrice);
            		
            		                 
            	
            	
            	case AssetColumn.TotalDepreciation:
            		return this.TotalDepreciation.CompareTo(rhs.TotalDepreciation);
            		
            		                 
            	
            	
            	case AssetColumn.BudgetDepreciation:
            		return this.BudgetDepreciation.CompareTo(rhs.BudgetDepreciation);
            		
            		                 
            	
            	
            	case AssetColumn.OwnDepreciation:
            		return this.OwnDepreciation.CompareTo(rhs.OwnDepreciation);
            		
            		                 
            	
            	
            	case AssetColumn.VentureDepreciation:
            		return this.VentureDepreciation.CompareTo(rhs.VentureDepreciation);
            		
            		                 
            	
            	
            	case AssetColumn.AnotherDepreciation:
            		return this.AnotherDepreciation.CompareTo(rhs.AnotherDepreciation);
            		
            		                 
            	
            	
            	case AssetColumn.BudgetRemain:
            		return this.BudgetRemain.CompareTo(rhs.BudgetRemain);
            		
            		                 
            	
            	
            	case AssetColumn.OwnRemain:
            		return this.OwnRemain.CompareTo(rhs.OwnRemain);
            		
            		                 
            	
            	
            	case AssetColumn.VentureRemain:
            		return this.VentureRemain.CompareTo(rhs.VentureRemain);
            		
            		                 
            	
            	
            	case AssetColumn.AnotherRemain:
            		return this.AnotherRemain.CompareTo(rhs.AnotherRemain);
            		
            		                 
            	
            	
            	case AssetColumn.TotalReamain:
            		return this.TotalReamain.CompareTo(rhs.TotalReamain);
            		
            		                 
            	
            	
            	case AssetColumn.UpDownCode:
            		return this.UpDownCode.CompareTo(rhs.UpDownCode);
            		
            		                 
            	
            	
            	case AssetColumn.InputDateTime:
            		return this.InputDateTime.CompareTo(rhs.InputDateTime);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AssetKey> Members
		
		// member variable for the EntityId property
		private AssetKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AssetKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AssetKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Asset")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{26}{25}- Id: {0}{25}- Name: {1}{25}- AssetGroupId: {2}{25}- UnitId: {3}{25}- Amount: {4}{25}- CounPro: {5}{25}- YearPro: {6}{25}- DepartmentUsedId: {7}{25}- TotalPrice: {8}{25}- BudgetPrice: {9}{25}- OwnPrice: {10}{25}- VenturePrice: {11}{25}- AnotherPrice: {12}{25}- TotalDepreciation: {13}{25}- BudgetDepreciation: {14}{25}- OwnDepreciation: {15}{25}- VentureDepreciation: {16}{25}- AnotherDepreciation: {17}{25}- BudgetRemain: {18}{25}- OwnRemain: {19}{25}- VentureRemain: {20}{25}- AnotherRemain: {21}{25}- TotalReamain: {22}{25}- UpDownCode: {23}{25}- InputDateTime: {24}{25}{27}", 
				this.Id,
				this.Name,
				(this.AssetGroupId == null) ? string.Empty : this.AssetGroupId.ToString(),
				(this.UnitId == null) ? string.Empty : this.UnitId.ToString(),
				this.Amount,
				this.CounPro,
				this.YearPro,
				(this.DepartmentUsedId == null) ? string.Empty : this.DepartmentUsedId.ToString(),
				this.TotalPrice,
				this.BudgetPrice,
				this.OwnPrice,
				this.VenturePrice,
				this.AnotherPrice,
				this.TotalDepreciation,
				this.BudgetDepreciation,
				this.OwnDepreciation,
				this.VentureDepreciation,
				this.AnotherDepreciation,
				this.BudgetRemain,
				this.OwnRemain,
				this.VentureRemain,
				this.AnotherRemain,
				this.TotalReamain,
				(this.UpDownCode == null) ? string.Empty : this.UpDownCode.ToString(),
				this.InputDateTime,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Asset' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AssetEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Asset"</remarks>
		public System.String Id;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String Name = string.Empty;
		
		/// <summary>
		/// AssetGroupId : 
		/// </summary>
		public System.String AssetGroupId = null;
		
		/// <summary>
		/// UnitId : 
		/// </summary>
		public System.String UnitId = null;
		
		/// <summary>
		/// Amount : 
		/// </summary>
		public System.Int32 Amount = (int)0;
		
		/// <summary>
		/// CounPro : 
		/// </summary>
		public System.String CounPro = string.Empty;
		
		/// <summary>
		/// YearPro : 
		/// </summary>
		public System.Int32 YearPro = (int)0;
		
		/// <summary>
		/// DepartmentUsedId : 
		/// </summary>
		public System.String DepartmentUsedId = null;
		
		/// <summary>
		/// TotalPrice : 
		/// </summary>
		public System.Int64 TotalPrice = (long)0;
		
		/// <summary>
		/// BudgetPrice : 
		/// </summary>
		public System.Int64 BudgetPrice = (long)0;
		
		/// <summary>
		/// OwnPrice : 
		/// </summary>
		public System.Int64 OwnPrice = (long)0;
		
		/// <summary>
		/// VenturePrice : 
		/// </summary>
		public System.Int64 VenturePrice = (long)0;
		
		/// <summary>
		/// AnotherPrice : 
		/// </summary>
		public System.Int64 AnotherPrice = (long)0;
		
		/// <summary>
		/// TotalDepreciation : 
		/// </summary>
		public System.Int64 TotalDepreciation = (long)0;
		
		/// <summary>
		/// BudgetDepreciation : 
		/// </summary>
		public System.Int64 BudgetDepreciation = (long)0;
		
		/// <summary>
		/// OwnDepreciation : 
		/// </summary>
		public System.Int64 OwnDepreciation = (long)0;
		
		/// <summary>
		/// VentureDepreciation : 
		/// </summary>
		public System.Int64 VentureDepreciation = (long)0;
		
		/// <summary>
		/// AnotherDepreciation : 
		/// </summary>
		public System.Int64 AnotherDepreciation = (long)0;
		
		/// <summary>
		/// BudgetRemain : 
		/// </summary>
		public System.Int64 BudgetRemain = (long)0;
		
		/// <summary>
		/// OwnRemain : 
		/// </summary>
		public System.Int64 OwnRemain = (long)0;
		
		/// <summary>
		/// VentureRemain : 
		/// </summary>
		public System.Int64 VentureRemain = (long)0;
		
		/// <summary>
		/// AnotherRemain : 
		/// </summary>
		public System.Int64 AnotherRemain = (long)0;
		
		/// <summary>
		/// TotalReamain : 
		/// </summary>
		public System.Int64 TotalReamain = (long)0;
		
		/// <summary>
		/// UpDownCode : 
		/// </summary>
		public System.String UpDownCode = null;
		
		/// <summary>
		/// InputDateTime : 
		/// </summary>
		public System.DateTime InputDateTime = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private AssetGroup _assetGroupIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AssetGroup"/>.
		/// </summary>
		/// <value>The source AssetGroup for AssetGroupId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AssetGroup AssetGroupIdSource
      	{
            get { return this._assetGroupIdSource; }
            set { this._assetGroupIdSource = value; }
      	}
		private DepartmentUsed _departmentUsedIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DepartmentUsed"/>.
		/// </summary>
		/// <value>The source DepartmentUsed for DepartmentUsedId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DepartmentUsed DepartmentUsedIdSource
      	{
            get { return this._departmentUsedIdSource; }
            set { this._departmentUsedIdSource = value; }
      	}
		private Unit _unitIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Unit"/>.
		/// </summary>
		/// <value>The source Unit for UnitId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Unit UnitIdSource
      	{
            get { return this._unitIdSource; }
            set { this._unitIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region WarrantyAssetCollection
		
		private TList<WarrantyAsset> _warrantyAssetAsssetId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _warrantyAssetAsssetId
		/// </summary>
		
		public TList<WarrantyAsset> WarrantyAssetCollection
		{
			get
			{
				if (_warrantyAssetAsssetId == null)
				{
				_warrantyAssetAsssetId = new TList<WarrantyAsset>();
				}
	
				return _warrantyAssetAsssetId;
			}
			set { _warrantyAssetAsssetId = value; }
		}
		
		#endregion

		#region AssetLiquidationCollection
		
		private TList<AssetLiquidation> _assetLiquidationAssetId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _assetLiquidationAssetId
		/// </summary>
		
		public TList<AssetLiquidation> AssetLiquidationCollection
		{
			get
			{
				if (_assetLiquidationAssetId == null)
				{
				_assetLiquidationAssetId = new TList<AssetLiquidation>();
				}
	
				return _assetLiquidationAssetId;
			}
			set { _assetLiquidationAssetId = value; }
		}
		
		#endregion

		#region RepairAssetCollection
		
		private TList<RepairAsset> _repairAssetAssetId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _repairAssetAssetId
		/// </summary>
		
		public TList<RepairAsset> RepairAssetCollection
		{
			get
			{
				if (_repairAssetAssetId == null)
				{
				_repairAssetAssetId = new TList<RepairAsset>();
				}
	
				return _repairAssetAssetId;
			}
			set { _repairAssetAssetId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AssetEntityData _tmp = new AssetEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.Name = this.Name;
			_tmp.AssetGroupId = this.AssetGroupId;
			_tmp.UnitId = this.UnitId;
			_tmp.Amount = this.Amount;
			_tmp.CounPro = this.CounPro;
			_tmp.YearPro = this.YearPro;
			_tmp.DepartmentUsedId = this.DepartmentUsedId;
			_tmp.TotalPrice = this.TotalPrice;
			_tmp.BudgetPrice = this.BudgetPrice;
			_tmp.OwnPrice = this.OwnPrice;
			_tmp.VenturePrice = this.VenturePrice;
			_tmp.AnotherPrice = this.AnotherPrice;
			_tmp.TotalDepreciation = this.TotalDepreciation;
			_tmp.BudgetDepreciation = this.BudgetDepreciation;
			_tmp.OwnDepreciation = this.OwnDepreciation;
			_tmp.VentureDepreciation = this.VentureDepreciation;
			_tmp.AnotherDepreciation = this.AnotherDepreciation;
			_tmp.BudgetRemain = this.BudgetRemain;
			_tmp.OwnRemain = this.OwnRemain;
			_tmp.VentureRemain = this.VentureRemain;
			_tmp.AnotherRemain = this.AnotherRemain;
			_tmp.TotalReamain = this.TotalReamain;
			_tmp.UpDownCode = this.UpDownCode;
			_tmp.InputDateTime = this.InputDateTime;
			
			#region Source Parent Composite Entities
			if (this.AssetGroupIdSource != null)
				_tmp.AssetGroupIdSource = MakeCopyOf(this.AssetGroupIdSource) as AssetGroup;
			if (this.DepartmentUsedIdSource != null)
				_tmp.DepartmentUsedIdSource = MakeCopyOf(this.DepartmentUsedIdSource) as DepartmentUsed;
			if (this.UnitIdSource != null)
				_tmp.UnitIdSource = MakeCopyOf(this.UnitIdSource) as Unit;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._warrantyAssetAsssetId != null)
				_tmp.WarrantyAssetCollection = (TList<WarrantyAsset>) MakeCopyOf(this.WarrantyAssetCollection); 
			if (this._assetLiquidationAssetId != null)
				_tmp.AssetLiquidationCollection = (TList<AssetLiquidation>) MakeCopyOf(this.AssetLiquidationCollection); 
			if (this._repairAssetAssetId != null)
				_tmp.RepairAssetCollection = (TList<RepairAsset>) MakeCopyOf(this.RepairAssetCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AssetEntityData _tmp = new AssetEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.Name = this.Name;
			_tmp.AssetGroupId = this.AssetGroupId;
			_tmp.UnitId = this.UnitId;
			_tmp.Amount = this.Amount;
			_tmp.CounPro = this.CounPro;
			_tmp.YearPro = this.YearPro;
			_tmp.DepartmentUsedId = this.DepartmentUsedId;
			_tmp.TotalPrice = this.TotalPrice;
			_tmp.BudgetPrice = this.BudgetPrice;
			_tmp.OwnPrice = this.OwnPrice;
			_tmp.VenturePrice = this.VenturePrice;
			_tmp.AnotherPrice = this.AnotherPrice;
			_tmp.TotalDepreciation = this.TotalDepreciation;
			_tmp.BudgetDepreciation = this.BudgetDepreciation;
			_tmp.OwnDepreciation = this.OwnDepreciation;
			_tmp.VentureDepreciation = this.VentureDepreciation;
			_tmp.AnotherDepreciation = this.AnotherDepreciation;
			_tmp.BudgetRemain = this.BudgetRemain;
			_tmp.OwnRemain = this.OwnRemain;
			_tmp.VentureRemain = this.VentureRemain;
			_tmp.AnotherRemain = this.AnotherRemain;
			_tmp.TotalReamain = this.TotalReamain;
			_tmp.UpDownCode = this.UpDownCode;
			_tmp.InputDateTime = this.InputDateTime;
			
			#region Source Parent Composite Entities
			if (this.AssetGroupIdSource != null && existingCopies.Contains(this.AssetGroupIdSource))
				_tmp.AssetGroupIdSource = existingCopies[this.AssetGroupIdSource] as AssetGroup;
			else
				_tmp.AssetGroupIdSource = MakeCopyOf(this.AssetGroupIdSource, existingCopies) as AssetGroup;
			if (this.DepartmentUsedIdSource != null && existingCopies.Contains(this.DepartmentUsedIdSource))
				_tmp.DepartmentUsedIdSource = existingCopies[this.DepartmentUsedIdSource] as DepartmentUsed;
			else
				_tmp.DepartmentUsedIdSource = MakeCopyOf(this.DepartmentUsedIdSource, existingCopies) as DepartmentUsed;
			if (this.UnitIdSource != null && existingCopies.Contains(this.UnitIdSource))
				_tmp.UnitIdSource = existingCopies[this.UnitIdSource] as Unit;
			else
				_tmp.UnitIdSource = MakeCopyOf(this.UnitIdSource, existingCopies) as Unit;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.WarrantyAssetCollection = (TList<WarrantyAsset>) MakeCopyOf(this.WarrantyAssetCollection, existingCopies); 
			_tmp.AssetLiquidationCollection = (TList<AssetLiquidation>) MakeCopyOf(this.AssetLiquidationCollection, existingCopies); 
			_tmp.RepairAssetCollection = (TList<RepairAsset>) MakeCopyOf(this.RepairAssetCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AssetColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AssetColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AssetColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AssetColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AssetColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AssetColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				AssetEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AssetEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AssetColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AssetColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AssetEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AssetEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AssetEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Asset"/> object.
	/// </remarks>
	public class AssetEventArgs : System.EventArgs
	{
		private AssetColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AssetEventArgs class.
		///</summary>
		public AssetEventArgs(AssetColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AssetEventArgs class.
		///</summary>
		public AssetEventArgs(AssetColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AssetColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AssetColumn" />
		public AssetColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Asset related events.
	///</summary>
	public delegate void AssetEventHandler(object sender, AssetEventArgs e);
	
	#region AssetComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AssetComparer : System.Collections.Generic.IComparer<Asset>
	{
		AssetColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AssetComparer"/> class.
        /// </summary>
		public AssetComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AssetComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AssetComparer(AssetColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Asset"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Asset"/> to compare.</param>
        /// <param name="b">The second <c>Asset</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Asset a, Asset b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Asset entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Asset a, Asset b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AssetColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AssetKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Asset"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AssetKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AssetKey class.
		/// </summary>
		public AssetKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AssetKey class.
		/// </summary>
		public AssetKey(AssetBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AssetKey class.
		/// </summary>
		public AssetKey(System.String _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AssetBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AssetBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.String _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.String Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.String) EntityUtil.ChangeType(values["Id"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AssetColumn Enum
	
	/// <summary>
	/// Enumerate the Asset columns.
	/// </summary>
	[Serializable]
	public enum AssetColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 10)]
		Id = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name = 2,
		/// <summary>
		/// AssetGroupId : 
		/// </summary>
		[EnumTextValue("AssetGroupId")]
		[ColumnEnum("AssetGroupId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		AssetGroupId = 3,
		/// <summary>
		/// UnitId : 
		/// </summary>
		[EnumTextValue("UnitId")]
		[ColumnEnum("UnitId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		UnitId = 4,
		/// <summary>
		/// Amount : 
		/// </summary>
		[EnumTextValue("Amount")]
		[ColumnEnum("Amount", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Amount = 5,
		/// <summary>
		/// CounPro : 
		/// </summary>
		[EnumTextValue("CounPro")]
		[ColumnEnum("CounPro", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		CounPro = 6,
		/// <summary>
		/// YearPro : 
		/// </summary>
		[EnumTextValue("YearPro")]
		[ColumnEnum("YearPro", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		YearPro = 7,
		/// <summary>
		/// DepartmentUsedId : 
		/// </summary>
		[EnumTextValue("DepartmentUsedId")]
		[ColumnEnum("DepartmentUsedId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		DepartmentUsedId = 8,
		/// <summary>
		/// TotalPrice : 
		/// </summary>
		[EnumTextValue("TotalPrice")]
		[ColumnEnum("TotalPrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		TotalPrice = 9,
		/// <summary>
		/// BudgetPrice : 
		/// </summary>
		[EnumTextValue("BudgetPrice")]
		[ColumnEnum("BudgetPrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		BudgetPrice = 10,
		/// <summary>
		/// OwnPrice : 
		/// </summary>
		[EnumTextValue("OwnPrice")]
		[ColumnEnum("OwnPrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		OwnPrice = 11,
		/// <summary>
		/// VenturePrice : 
		/// </summary>
		[EnumTextValue("VenturePrice")]
		[ColumnEnum("VenturePrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		VenturePrice = 12,
		/// <summary>
		/// AnotherPrice : 
		/// </summary>
		[EnumTextValue("AnotherPrice")]
		[ColumnEnum("AnotherPrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		AnotherPrice = 13,
		/// <summary>
		/// TotalDepreciation : 
		/// </summary>
		[EnumTextValue("TotalDepreciation")]
		[ColumnEnum("TotalDepreciation", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		TotalDepreciation = 14,
		/// <summary>
		/// BudgetDepreciation : 
		/// </summary>
		[EnumTextValue("BudgetDepreciation")]
		[ColumnEnum("BudgetDepreciation", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		BudgetDepreciation = 15,
		/// <summary>
		/// OwnDepreciation : 
		/// </summary>
		[EnumTextValue("OwnDepreciation")]
		[ColumnEnum("OwnDepreciation", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		OwnDepreciation = 16,
		/// <summary>
		/// VentureDepreciation : 
		/// </summary>
		[EnumTextValue("VentureDepreciation")]
		[ColumnEnum("VentureDepreciation", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		VentureDepreciation = 17,
		/// <summary>
		/// AnotherDepreciation : 
		/// </summary>
		[EnumTextValue("AnotherDepreciation")]
		[ColumnEnum("AnotherDepreciation", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		AnotherDepreciation = 18,
		/// <summary>
		/// BudgetRemain : 
		/// </summary>
		[EnumTextValue("BudgetRemain")]
		[ColumnEnum("BudgetRemain", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		BudgetRemain = 19,
		/// <summary>
		/// OwnRemain : 
		/// </summary>
		[EnumTextValue("OwnRemain")]
		[ColumnEnum("OwnRemain", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		OwnRemain = 20,
		/// <summary>
		/// VentureRemain : 
		/// </summary>
		[EnumTextValue("VentureRemain")]
		[ColumnEnum("VentureRemain", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		VentureRemain = 21,
		/// <summary>
		/// AnotherRemain : 
		/// </summary>
		[EnumTextValue("AnotherRemain")]
		[ColumnEnum("AnotherRemain", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		AnotherRemain = 22,
		/// <summary>
		/// TotalReamain : 
		/// </summary>
		[EnumTextValue("TotalReamain")]
		[ColumnEnum("TotalReamain", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		TotalReamain = 23,
		/// <summary>
		/// UpDownCode : 
		/// </summary>
		[EnumTextValue("UpDownCode")]
		[ColumnEnum("UpDownCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		UpDownCode = 24,
		/// <summary>
		/// InputDateTime : 
		/// </summary>
		[EnumTextValue("InputDateTime")]
		[ColumnEnum("InputDateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		InputDateTime = 25
	}//End enum

	#endregion AssetColumn Enum

} // end namespace
