<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cunghoc3_AssetManager.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Partner objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Partner objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Partner objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Partner objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Partner__3214EC07286302EC index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Partner})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Partner object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.Partner object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Partner object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Partner object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Partner)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Partner object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.Partner object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroupType objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroupType objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroupType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroupType objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__AssetGro__3214EC077F60ED59 index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroupType})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.AssetGroupType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.AssetGroupType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.AssetGroupType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.AssetGroupType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.AssetGroupType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.AssetGroupType object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.AssetGroupType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Asset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Asset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Asset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Asset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.GetByAssetGroupId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__Asset__AssetGrou__15502E78 key.
            	FK__Asset__AssetGrou__15502E78 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_assetGroupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Asset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.GetByDepartmentUsedId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__Asset__Departmen__173876EA key.
            	FK__Asset__Departmen__173876EA Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_departmentUsedId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Asset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.GetByUnitId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__Asset__UnitId__164452B1 key.
            	FK__Asset__UnitId__164452B1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_unitId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Asset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Asset__3214EC071367E606 index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Asset})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Asset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.Asset object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Asset object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Asset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Asset)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Asset object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.Asset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,cunghoc3_AssetManager.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:cunghoc3_AssetManager.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:cunghoc3_AssetManager.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:cunghoc3_AssetManager.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Capital objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Capital objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Capital objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Capital objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Capital__3214EC0707F6335A index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Capital})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Capital object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.Capital object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Capital object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Capital object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Capital)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Capital object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.Capital object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> entity.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.UpDownReason objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.UpDownReason objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.UpDownReason objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.UpDownReason objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__UpDownRe__3214EC074BAC3F29 index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.UpDownReason})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.UpDownReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.UpDownReason object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.UpDownReason object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.UpDownReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.UpDownReason)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.UpDownReason object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.UpDownReason object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlUpDownReasonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(cunghoc3_AssetManager.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(cunghoc3_AssetManager.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(cunghoc3_AssetManager.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(cunghoc3_AssetManager.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(cunghoc3_AssetManager.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(cunghoc3_AssetManager.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(cunghoc3_AssetManager.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(cunghoc3_AssetManager.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:cunghoc3_AssetManager.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.DepartmentUsedProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentUsedProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlDepartmentUsedProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.UnitProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlUnitProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlUnitProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.UpDownReasonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.UpDownReason"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlUpDownReasonProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlUpDownReasonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.AssetGroupTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetGroupTypeProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetGroupTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.AssetGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetGroupProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.PartnerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlPartnerProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlPartnerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.AssetProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.AssetLiquidationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetLiquidationProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlAssetLiquidationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.CapitalProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlCapitalProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlCapitalProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.WarrantyAssetProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlWarrantyAssetProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlWarrantyAssetProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.RepairAssetProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlRepairAssetProvider">
            <summary>
            Gets the current <see cref="P:cunghoc3_AssetManager.Data.SqlClient.SqlNetTiersProvider.SqlRepairAssetProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> entity.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.RepairAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.RepairAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.RepairAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.RepairAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.GetByAssetId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__RepairAss__Asset__398D8EEE key.
            	FK__RepairAss__Asset__398D8EEE Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_assetId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.RepairAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.GetByDepartmentUsedId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__RepairAss__Depar__3A81B327 key.
            	FK__RepairAss__Depar__3A81B327 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_departmentUsedId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.RepairAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.GetByPartnerId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__RepairAss__Partn__3B75D760 key.
            	FK__RepairAss__Partn__3B75D760 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_partnerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.RepairAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__RepairAs__3214EC0737A5467C index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.RepairAsset"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.RepairAsset})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.RepairAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.RepairAsset object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.RepairAsset object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.RepairAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.RepairAsset)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.RepairAsset object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.RepairAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlRepairAssetProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> entity.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetLiquidation objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetLiquidation objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetLiquidation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetLiquidation objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.GetByAssetId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__AssetLiqu__Asset__31EC6D26 key.
            	FK__AssetLiqu__Asset__31EC6D26 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_assetId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetLiquidation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.GetByDepartmentUsedId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__AssetLiqu__Depar__32E0915F key.
            	FK__AssetLiqu__Depar__32E0915F Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_departmentUsedId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetLiquidation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__AssetLiq__3214EC07300424B4 index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetLiquidation"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetLiquidation})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.AssetLiquidation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.AssetLiquidation object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.AssetLiquidation object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.AssetLiquidation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.AssetLiquidation)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.AssetLiquidation object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.AssetLiquidation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetLiquidationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Unit objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Unit objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Unit objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.Unit objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Unit__3214EC070F975522 index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.Unit})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.Unit object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Unit object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.Unit)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.Unit object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> entity.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.DepartmentUsed objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.DepartmentUsed objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.DepartmentUsed objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.DepartmentUsed objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Departme__3214EC070BC6C43E index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.DepartmentUsed"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.DepartmentUsed})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.DepartmentUsed object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.DepartmentUsed object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.DepartmentUsed object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.DepartmentUsed object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.DepartmentUsed)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.DepartmentUsed object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.DepartmentUsed object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlDepartmentUsedProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroupType"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.WarrantyAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.WarrantyAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.WarrantyAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.WarrantyAsset objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.GetByAsssetId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__WarrantyA__Assse__4222D4EF key.
            	FK__WarrantyA__Assse__4222D4EF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_asssetId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.WarrantyAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.GetByDepartmentUsedId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__WarrantyA__Depar__4316F928 key.
            	FK__WarrantyA__Depar__4316F928 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_departmentUsedId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.WarrantyAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.GetByPartnerId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__WarrantyA__Partn__440B1D61 key.
            	FK__WarrantyA__Partn__440B1D61 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_partnerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.WarrantyAsset objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__Warranty__3214EC07403A8C7D index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.WarrantyAsset})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.WarrantyAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.WarrantyAsset object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.WarrantyAsset object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.WarrantyAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.WarrantyAsset)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.WarrantyAsset object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.WarrantyAsset object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Asset"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> entity.
            </summary>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.Delete(cunghoc3_AssetManager.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroup objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.Find(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:cunghoc3_AssetManager.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroup objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.GetAll(cunghoc3_AssetManager.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.GetPaged(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroup objects.</returns>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.GetByAssetGroupTypeId(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__AssetGrou__Asset__0519C6AF key.
            	FK__AssetGrou__Asset__0519C6AF Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_assetGroupTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of cunghoc3_AssetManager.Entities.AssetGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.GetById(cunghoc3_AssetManager.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__AssetGro__3214EC0703317E3D index.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:cunghoc3_AssetManager.Entities.AssetGroup"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.BulkInsert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.TList{cunghoc3_AssetManager.Entities.AssetGroup})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.AssetGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.Insert(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            	Inserts a cunghoc3_AssetManager.Entities.AssetGroup object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.AssetGroup object to insert.</param>
            <remarks>
            	After inserting into the datasource, the cunghoc3_AssetManager.Entities.AssetGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.Update(cunghoc3_AssetManager.Data.TransactionManager,cunghoc3_AssetManager.Entities.AssetGroup)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:cunghoc3_AssetManager.Data.TransactionManager"/> object</param>
            <param name="entity">cunghoc3_AssetManager.Entities.AssetGroup object to update.</param>
            <remarks>
            	After updating the datasource, the cunghoc3_AssetManager.Entities.AssetGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlAssetGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.WarrantyAsset"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlWarrantyAssetProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Partner"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlPartnerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Capital"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlCapitalProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:cunghoc3_AssetManager.Entities.Unit"/> entity.
            </summary>
        </member>
        <member name="M:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:cunghoc3_AssetManager.Data.SqlClient.SqlUnitProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
